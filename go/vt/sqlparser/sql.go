// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                    int
	empty                  struct{}
	statement              Statement
	selStmt                SelectStatement
	ddl                    *DDL
	ins                    *Insert
	byt                    byte
	bytes                  []byte
	bytes2                 [][]byte
	str                    string
	strs                   []string
	selectExprs            SelectExprs
	selectExpr             SelectExpr
	columns                Columns
	partitions             Partitions
	colName                *ColName
	tableExprs             TableExprs
	tableExpr              TableExpr
	joinCondition          JoinCondition
	tableName              TableName
	tableNames             TableNames
	indexHints             *IndexHints
	expr                   Expr
	exprs                  Exprs
	boolVal                BoolVal
	boolean                bool
	literal                *Literal
	colTuple               ColTuple
	values                 Values
	valTuple               ValTuple
	subquery               *Subquery
	whens                  []*When
	when                   *When
	orderBy                OrderBy
	order                  *Order
	limit                  *Limit
	updateExprs            UpdateExprs
	setExprs               SetExprs
	updateExpr             *UpdateExpr
	setExpr                *SetExpr
	characteristic         Characteristic
	characteristics        []Characteristic
	colIdent               ColIdent
	tableIdent             TableIdent
	convertType            *ConvertType
	aliasedTableName       *AliasedTableExpr
	TableSpec              *TableSpec
	columnType             ColumnType
	colKeyOpt              ColumnKeyOption
	optVal                 Expr
	LengthScaleOption      LengthScaleOption
	OnlineDDLHint          *OnlineDDLHint
	columnDefinition       *ColumnDefinition
	indexDefinition        *IndexDefinition
	indexInfo              *IndexInfo
	indexOption            *IndexOption
	indexOptions           []*IndexOption
	indexColumn            *IndexColumn
	indexColumns           []*IndexColumn
	constraintDefinition   *ConstraintDefinition
	constraintInfo         ConstraintInfo
	ReferenceAction        ReferenceAction
	partDefs               []*PartitionDefinition
	partDef                *PartitionDefinition
	partSpec               *PartitionSpec
	vindexParam            VindexParam
	vindexParams           []VindexParam
	showFilter             *ShowFilter
	optLike                *OptLike
	isolationLevel         IsolationLevel
	unionType              UnionType
	insertAction           InsertAction
	scope                  Scope
	ignore                 Ignore
	lock                   Lock
	joinType               JoinType
	comparisonExprOperator ComparisonExprOperator
	isExprOperator         IsExprOperator
	matchExprOption        MatchExprOption
	orderDirection         OrderDirection
	explainType            ExplainType
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const VSTREAM = 57350
const INSERT = 57351
const UPDATE = 57352
const DELETE = 57353
const FROM = 57354
const WHERE = 57355
const GROUP = 57356
const HAVING = 57357
const ORDER = 57358
const BY = 57359
const LIMIT = 57360
const OFFSET = 57361
const FOR = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const KEY = 57371
const DEFAULT = 57372
const SET = 57373
const LOCK = 57374
const UNLOCK = 57375
const KEYS = 57376
const DO = 57377
const DISTINCTROW = 57378
const OUTFILE = 57379
const S3 = 57380
const VALUES = 57381
const LAST_INSERT_ID = 57382
const NEXT = 57383
const VALUE = 57384
const SHARE = 57385
const MODE = 57386
const SQL_NO_CACHE = 57387
const SQL_CACHE = 57388
const SQL_CALC_FOUND_ROWS = 57389
const JOIN = 57390
const STRAIGHT_JOIN = 57391
const LEFT = 57392
const RIGHT = 57393
const INNER = 57394
const OUTER = 57395
const CROSS = 57396
const NATURAL = 57397
const USE = 57398
const FORCE = 57399
const ON = 57400
const USING = 57401
const ID = 57402
const AT_ID = 57403
const AT_AT_ID = 57404
const HEX = 57405
const STRING = 57406
const INTEGRAL = 57407
const FLOAT = 57408
const HEXNUM = 57409
const VALUE_ARG = 57410
const LIST_ARG = 57411
const COMMENT = 57412
const COMMENT_KEYWORD = 57413
const BIT_LITERAL = 57414
const NULL = 57415
const TRUE = 57416
const FALSE = 57417
const OFF = 57418
const OR = 57419
const XOR = 57420
const AND = 57421
const NOT = 57422
const BETWEEN = 57423
const CASE = 57424
const WHEN = 57425
const THEN = 57426
const ELSE = 57427
const END = 57428
const LE = 57429
const GE = 57430
const NE = 57431
const NULL_SAFE_EQUAL = 57432
const IS = 57433
const LIKE = 57434
const REGEXP = 57435
const IN = 57436
const SHIFT_LEFT = 57437
const SHIFT_RIGHT = 57438
const DIV = 57439
const MOD = 57440
const UNARY = 57441
const COLLATE = 57442
const BINARY = 57443
const UNDERSCORE_BINARY = 57444
const UNDERSCORE_UTF8MB4 = 57445
const UNDERSCORE_UTF8 = 57446
const UNDERSCORE_LATIN1 = 57447
const INTERVAL = 57448
const JSON_EXTRACT_OP = 57449
const JSON_UNQUOTE_EXTRACT_OP = 57450
const CREATE = 57451
const ALTER = 57452
const DROP = 57453
const RENAME = 57454
const ANALYZE = 57455
const ADD = 57456
const FLUSH = 57457
const SCHEMA = 57458
const TABLE = 57459
const INDEX = 57460
const VIEW = 57461
const TO = 57462
const IGNORE = 57463
const IF = 57464
const UNIQUE = 57465
const PRIMARY = 57466
const COLUMN = 57467
const SPATIAL = 57468
const FULLTEXT = 57469
const KEY_BLOCK_SIZE = 57470
const CHECK = 57471
const INDEXES = 57472
const ACTION = 57473
const CASCADE = 57474
const CONSTRAINT = 57475
const FOREIGN = 57476
const NO = 57477
const REFERENCES = 57478
const RESTRICT = 57479
const SHOW = 57480
const DESCRIBE = 57481
const EXPLAIN = 57482
const DATE = 57483
const ESCAPE = 57484
const REPAIR = 57485
const OPTIMIZE = 57486
const TRUNCATE = 57487
const MAXVALUE = 57488
const PARTITION = 57489
const REORGANIZE = 57490
const LESS = 57491
const THAN = 57492
const PROCEDURE = 57493
const TRIGGER = 57494
const VINDEX = 57495
const VINDEXES = 57496
const STATUS = 57497
const VARIABLES = 57498
const WARNINGS = 57499
const SEQUENCE = 57500
const BEGIN = 57501
const START = 57502
const TRANSACTION = 57503
const COMMIT = 57504
const ROLLBACK = 57505
const SAVEPOINT = 57506
const RELEASE = 57507
const WORK = 57508
const BIT = 57509
const TINYINT = 57510
const SMALLINT = 57511
const MEDIUMINT = 57512
const INT = 57513
const INTEGER = 57514
const BIGINT = 57515
const INTNUM = 57516
const REAL = 57517
const DOUBLE = 57518
const FLOAT_TYPE = 57519
const DECIMAL = 57520
const NUMERIC = 57521
const TIME = 57522
const TIMESTAMP = 57523
const DATETIME = 57524
const YEAR = 57525
const CHAR = 57526
const VARCHAR = 57527
const BOOL = 57528
const CHARACTER = 57529
const VARBINARY = 57530
const NCHAR = 57531
const TEXT = 57532
const TINYTEXT = 57533
const MEDIUMTEXT = 57534
const LONGTEXT = 57535
const BLOB = 57536
const TINYBLOB = 57537
const MEDIUMBLOB = 57538
const LONGBLOB = 57539
const JSON = 57540
const ENUM = 57541
const GEOMETRY = 57542
const POINT = 57543
const LINESTRING = 57544
const POLYGON = 57545
const GEOMETRYCOLLECTION = 57546
const MULTIPOINT = 57547
const MULTILINESTRING = 57548
const MULTIPOLYGON = 57549
const NULLX = 57550
const AUTO_INCREMENT = 57551
const APPROXNUM = 57552
const SIGNED = 57553
const UNSIGNED = 57554
const ZEROFILL = 57555
const COLLATION = 57556
const DATABASES = 57557
const TABLES = 57558
const VITESS_METADATA = 57559
const VSCHEMA = 57560
const FULL = 57561
const PROCESSLIST = 57562
const COLUMNS = 57563
const FIELDS = 57564
const ENGINES = 57565
const PLUGINS = 57566
const EXTENDED = 57567
const KEYSPACES = 57568
const VITESS_KEYSPACES = 57569
const VITESS_SHARDS = 57570
const VITESS_TABLETS = 57571
const NAMES = 57572
const CHARSET = 57573
const GLOBAL = 57574
const SESSION = 57575
const ISOLATION = 57576
const LEVEL = 57577
const READ = 57578
const WRITE = 57579
const ONLY = 57580
const REPEATABLE = 57581
const COMMITTED = 57582
const UNCOMMITTED = 57583
const SERIALIZABLE = 57584
const CURRENT_TIMESTAMP = 57585
const DATABASE = 57586
const CURRENT_DATE = 57587
const CURRENT_TIME = 57588
const LOCALTIME = 57589
const LOCALTIMESTAMP = 57590
const UTC_DATE = 57591
const UTC_TIME = 57592
const UTC_TIMESTAMP = 57593
const REPLACE = 57594
const CONVERT = 57595
const CAST = 57596
const SUBSTR = 57597
const SUBSTRING = 57598
const GROUP_CONCAT = 57599
const SEPARATOR = 57600
const TIMESTAMPADD = 57601
const TIMESTAMPDIFF = 57602
const MATCH = 57603
const AGAINST = 57604
const BOOLEAN = 57605
const LANGUAGE = 57606
const WITH = 57607
const QUERY = 57608
const EXPANSION = 57609
const UNUSED = 57610
const ARRAY = 57611
const CUME_DIST = 57612
const DESCRIPTION = 57613
const DENSE_RANK = 57614
const EMPTY = 57615
const EXCEPT = 57616
const FIRST_VALUE = 57617
const GROUPING = 57618
const GROUPS = 57619
const JSON_TABLE = 57620
const LAG = 57621
const LAST_VALUE = 57622
const LATERAL = 57623
const LEAD = 57624
const MEMBER = 57625
const NTH_VALUE = 57626
const NTILE = 57627
const OF = 57628
const OVER = 57629
const PERCENT_RANK = 57630
const RANK = 57631
const RECURSIVE = 57632
const ROW_NUMBER = 57633
const SYSTEM = 57634
const WINDOW = 57635
const ACTIVE = 57636
const ADMIN = 57637
const BUCKETS = 57638
const CLONE = 57639
const COMPONENT = 57640
const DEFINITION = 57641
const ENFORCED = 57642
const EXCLUDE = 57643
const FOLLOWING = 57644
const GEOMCOLLECTION = 57645
const GET_MASTER_PUBLIC_KEY = 57646
const HISTOGRAM = 57647
const HISTORY = 57648
const INACTIVE = 57649
const INVISIBLE = 57650
const LOCKED = 57651
const MASTER_COMPRESSION_ALGORITHMS = 57652
const MASTER_PUBLIC_KEY_PATH = 57653
const MASTER_TLS_CIPHERSUITES = 57654
const MASTER_ZSTD_COMPRESSION_LEVEL = 57655
const NESTED = 57656
const NETWORK_NAMESPACE = 57657
const NOWAIT = 57658
const NULLS = 57659
const OJ = 57660
const OLD = 57661
const OPTIONAL = 57662
const ORDINALITY = 57663
const ORGANIZATION = 57664
const OTHERS = 57665
const PATH = 57666
const PERSIST = 57667
const PERSIST_ONLY = 57668
const PRECEDING = 57669
const PRIVILEGE_CHECKS_USER = 57670
const PROCESS = 57671
const RANDOM = 57672
const REFERENCE = 57673
const REQUIRE_ROW_FORMAT = 57674
const RESOURCE = 57675
const RESPECT = 57676
const RESTART = 57677
const RETAIN = 57678
const REUSE = 57679
const ROLE = 57680
const SECONDARY = 57681
const SECONDARY_ENGINE = 57682
const SECONDARY_LOAD = 57683
const SECONDARY_UNLOAD = 57684
const SKIP = 57685
const SRID = 57686
const THREAD_PRIORITY = 57687
const TIES = 57688
const UNBOUNDED = 57689
const VCPU = 57690
const VISIBLE = 57691
const FORMAT = 57692
const TREE = 57693
const VITESS = 57694
const TRADITIONAL = 57695

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"VSTREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DO",
	"DISTINCTROW",
	"OUTFILE",
	"S3",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"UNDERSCORE_UTF8",
	"UNDERSCORE_LATIN1",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"SAVEPOINT",
	"RELEASE",
	"WORK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"EXTENDED",
	"KEYSPACES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"FORMAT",
	"TREE",
	"VITESS",
	"TRADITIONAL",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 44,
	34, 312,
	135, 312,
	147, 312,
	172, 326,
	173, 326,
	-2, 314,
	-1, 49,
	137, 336,
	-2, 334,
	-1, 72,
	41, 372,
	-2, 380,
	-1, 401,
	123, 708,
	-2, 704,
	-1, 402,
	123, 709,
	-2, 705,
	-1, 416,
	41, 373,
	-2, 385,
	-1, 417,
	41, 374,
	-2, 386,
	-1, 438,
	91, 965,
	-2, 74,
	-1, 439,
	91, 879,
	-2, 75,
	-1, 444,
	91, 846,
	-2, 667,
	-1, 446,
	91, 911,
	-2, 669,
	-1, 949,
	123, 711,
	-2, 707,
	-1, 1036,
	59, 56,
	61, 56,
	-2, 60,
	-1, 1386,
	5, 624,
	18, 624,
	20, 624,
	32, 624,
	62, 624,
	-2, 411,
}

const yyPrivate = 57344

const yyLast = 18669

var yyAct = [...]int{

	401, 1632, 1622, 1311, 1589, 1429, 1504, 345, 1491, 1366,
	1213, 1058, 1538, 1233, 360, 1030, 1402, 620, 409, 1081,
	1054, 1214, 1363, 1067, 1367, 739, 1101, 374, 1057, 1201,
	331, 71, 3, 700, 1027, 1087, 1378, 871, 1330, 92,
	746, 1262, 1372, 291, 936, 314, 291, 443, 943, 1279,
	1151, 92, 891, 291, 1288, 772, 601, 1071, 777, 1009,
	1032, 784, 1016, 767, 969, 418, 766, 744, 403, 69,
	913, 347, 28, 783, 1038, 1097, 756, 425, 774, 569,
	92, 343, 781, 92, 291, 332, 291, 67, 335, 610,
	72, 714, 336, 899, 66, 8, 590, 440, 289, 1625,
	7, 6, 713, 1609, 1620, 1597, 1617, 279, 327, 1430,
	277, 1608, 1596, 1347, 1459, 574, 785, 618, 786, 1120,
	1397, 1398, 74, 75, 76, 77, 78, 79, 1396, 287,
	283, 284, 285, 1119, 94, 95, 96, 1049, 1050, 571,
	404, 573, 386, 1048, 392, 393, 390, 391, 389, 388,
	387, 633, 30, 429, 334, 60, 34, 35, 394, 395,
	333, 1270, 437, 1080, 1313, 1494, 94, 95, 96, 946,
	1250, 1088, 1450, 1249, 1448, 324, 1251, 1118, 1564, 662,
	661, 671, 672, 664, 665, 666, 667, 668, 669, 670,
	663, 628, 1331, 673, 898, 629, 626, 627, 94, 95,
	96, 326, 322, 631, 859, 607, 59, 609, 1619, 280,
	621, 622, 1315, 632, 858, 856, 1616, 1590, 1310, 1010,
	1314, 1582, 1636, 1405, 1640, 1074, 1539, 1234, 1236, 616,
	1115, 1112, 1113, 1333, 1111, 278, 1547, 1307, 591, 606,
	608, 1541, 431, 1309, 424, 860, 900, 901, 902, 576,
	857, 1316, 864, 636, 847, 1074, 281, 286, 1389, 94,
	95, 96, 1388, 1387, 572, 579, 294, 1122, 1125, 1055,
	1335, 282, 1339, 1170, 1334, 1571, 1332, 1473, 291, 581,
	582, 1337, 1167, 291, 1132, 592, 1298, 1131, 1395, 291,
	1336, 673, 685, 686, 1246, 291, 599, 1205, 586, 605,
	1180, 1159, 1044, 1338, 1340, 760, 92, 1117, 92, 1235,
	698, 597, 1540, 663, 988, 92, 673, 651, 652, 650,
	1294, 1295, 1296, 94, 95, 96, 611, 92, 92, 1116,
	615, 1073, 604, 580, 892, 653, 82, 1595, 589, 1088,
	1634, 920, 617, 1635, 596, 1633, 653, 1548, 1546, 1308,
	598, 1306, 1166, 603, 817, 918, 919, 917, 886, 1565,
	642, 1073, 993, 994, 647, 648, 583, 1349, 584, 1580,
	634, 585, 1556, 1121, 1376, 83, 787, 1416, 646, 652,
	650, 970, 593, 594, 595, 685, 686, 970, 1123, 1177,
	612, 613, 1297, 849, 685, 686, 653, 1302, 1299, 1290,
	1300, 1293, 1268, 1289, 651, 652, 650, 1291, 1292, 651,
	652, 650, 1351, 1462, 683, 61, 575, 651, 652, 650,
	752, 1301, 653, 893, 645, 623, 1600, 653, 92, 643,
	644, 291, 635, 291, 291, 653, 92, 737, 1077, 602,
	805, 1585, 92, 1500, 736, 1078, 1499, 887, 701, 1283,
	650, 1282, 1271, 440, 662, 661, 671, 672, 664, 665,
	666, 667, 668, 669, 670, 663, 653, 765, 673, 666,
	667, 668, 669, 670, 663, 1602, 59, 673, 1581, 717,
	719, 818, 723, 725, 749, 728, 764, 782, 916, 776,
	716, 718, 720, 722, 724, 726, 727, 738, 1144, 1145,
	1146, 94, 95, 96, 1517, 577, 578, 831, 834, 835,
	836, 837, 838, 839, 430, 840, 841, 842, 843, 844,
	819, 820, 821, 822, 803, 804, 832, 1165, 806, 1164,
	807, 808, 809, 810, 811, 812, 813, 814, 815, 816,
	823, 824, 825, 826, 827, 828, 829, 830, 651, 652,
	650, 1641, 1497, 1463, 662, 661, 671, 672, 664, 665,
	666, 667, 668, 669, 670, 663, 653, 435, 673, 291,
	1280, 884, 876, 845, 92, 862, 848, 990, 850, 291,
	291, 92, 92, 92, 587, 748, 413, 291, 1544, 1618,
	1553, 291, 432, 433, 291, 869, 870, 1642, 291, 1375,
	92, 1604, 413, 833, 1552, 92, 92, 92, 291, 92,
	92, 1152, 1412, 908, 910, 911, 1544, 1593, 1364, 989,
	909, 1375, 92, 92, 795, 68, 664, 665, 666, 667,
	668, 669, 670, 663, 851, 852, 673, 1075, 651, 652,
	650, 1469, 861, 1544, 413, 873, 776, 1544, 1572, 868,
	363, 362, 365, 366, 367, 368, 653, 875, 59, 364,
	369, 1544, 1543, 881, 94, 95, 96, 649, 938, 865,
	1555, 94, 95, 96, 937, 1253, 1489, 1488, 1475, 413,
	1472, 413, 413, 939, 914, 1422, 1421, 1418, 1419, 1418,
	1417, 846, 754, 413, 1013, 413, 30, 92, 853, 854,
	855, 671, 672, 664, 665, 666, 667, 668, 669, 670,
	663, 1202, 30, 673, 958, 961, 947, 874, 649, 413,
	971, 895, 878, 879, 880, 70, 882, 883, 915, 1524,
	92, 92, 794, 793, 1420, 1001, 948, 1208, 1202, 888,
	889, 1040, 953, 753, 1040, 1209, 949, 1240, 92, 1039,
	59, 406, 1013, 1254, 291, 983, 1047, 701, 92, 1013,
	1183, 1182, 291, 754, 291, 995, 59, 940, 941, 1012,
	754, 1039, 291, 291, 291, 991, 863, 779, 947, 30,
	92, 979, 980, 92, 754, 1312, 1375, 950, 1041, 1507,
	1043, 1041, 754, 1039, 92, 92, 1610, 440, 1007, 1013,
	440, 1506, 1082, 1028, 1480, 59, 1102, 1408, 949, 1003,
	1257, 1059, 1379, 1380, 1105, 1002, 1098, 1008, 1093, 1011,
	1092, 1627, 1623, 1083, 1084, 1085, 1086, 1410, 1382, 1036,
	1364, 1385, 1004, 59, 1005, 1284, 896, 867, 1225, 1094,
	1095, 1096, 1223, 1226, 1089, 1090, 1091, 1224, 291, 92,
	1042, 92, 1037, 1124, 1046, 1384, 402, 291, 291, 291,
	291, 291, 1045, 1222, 291, 291, 1221, 1614, 291, 92,
	1607, 1103, 954, 955, 1062, 1191, 960, 963, 964, 1227,
	1356, 1022, 1023, 747, 413, 1612, 291, 1200, 1199, 1275,
	1355, 291, 1190, 291, 291, 93, 966, 291, 92, 292,
	792, 978, 292, 1106, 981, 982, 600, 93, 1267, 292,
	967, 1587, 1126, 1127, 1128, 1129, 1130, 1099, 1100, 1133,
	1134, 1586, 1522, 1135, 662, 661, 671, 672, 664, 665,
	666, 667, 668, 669, 670, 663, 93, 1265, 673, 93,
	292, 1137, 292, 1259, 1467, 914, 1138, 1502, 1139, 1461,
	986, 1108, 1142, 1321, 661, 671, 672, 664, 665, 666,
	667, 668, 669, 670, 663, 866, 1107, 673, 1109, 1026,
	407, 408, 1161, 662, 661, 671, 672, 664, 665, 666,
	667, 668, 669, 670, 663, 410, 1136, 673, 1147, 915,
	662, 661, 671, 672, 664, 665, 666, 667, 668, 669,
	670, 663, 291, 1198, 673, 1466, 411, 1359, 70, 1189,
	740, 1197, 1465, 1202, 291, 291, 291, 291, 291, 1160,
	1215, 1195, 741, 404, 630, 1171, 291, 1629, 1628, 68,
	291, 1168, 890, 1176, 291, 761, 1203, 1629, 1206, 291,
	291, 1210, 1569, 291, 291, 291, 1018, 1021, 1022, 1023,
	1019, 1495, 1020, 1024, 987, 406, 1252, 73, 92, 1194,
	65, 1232, 1, 313, 1621, 1431, 1503, 1258, 1204, 1255,
	1114, 1263, 1263, 1241, 419, 1059, 1588, 1243, 1217, 1218,
	1216, 1220, 1537, 1219, 1401, 1065, 1056, 1228, 420, 81,
	567, 80, 873, 1579, 1238, 1242, 1239, 750, 751, 422,
	885, 421, 1244, 614, 1064, 1063, 92, 92, 1274, 1247,
	1276, 1277, 1278, 1264, 1156, 1157, 1545, 1269, 1079, 1272,
	1273, 1493, 1409, 1266, 1584, 800, 798, 1260, 1261, 799,
	797, 802, 801, 796, 292, 1174, 92, 306, 897, 292,
	323, 1287, 1025, 1281, 788, 292, 1018, 1021, 1022, 1023,
	1019, 292, 1020, 1024, 1104, 419, 1379, 1380, 755, 84,
	92, 1305, 93, 1304, 93, 1110, 937, 1303, 1076, 420,
	303, 93, 624, 625, 308, 276, 681, 1327, 416, 417,
	422, 1196, 421, 93, 93, 1248, 441, 1329, 434, 1370,
	1318, 1319, 985, 992, 743, 1464, 1358, 291, 1352, 1320,
	1175, 1328, 710, 968, 770, 1342, 92, 1326, 346, 907,
	1341, 361, 92, 92, 358, 1348, 1215, 359, 948, 1365,
	996, 1207, 655, 1327, 1286, 1362, 344, 338, 949, 769,
	762, 1017, 1015, 1014, 775, 1381, 1377, 1368, 92, 1456,
	768, 291, 1000, 1374, 415, 965, 1563, 1458, 414, 52,
	33, 328, 1357, 1317, 638, 92, 1383, 92, 92, 423,
	23, 1263, 1263, 22, 21, 20, 19, 25, 1400, 1391,
	18, 1393, 1059, 1394, 1059, 1392, 1415, 17, 16, 588,
	1390, 37, 1404, 1399, 93, 291, 27, 292, 26, 292,
	292, 15, 93, 1413, 1414, 14, 13, 12, 93, 11,
	10, 9, 1406, 1407, 5, 291, 4, 641, 24, 699,
	2, 92, 0, 1432, 92, 92, 92, 291, 0, 1424,
	0, 662, 661, 671, 672, 664, 665, 666, 667, 668,
	669, 670, 663, 0, 1425, 673, 1427, 0, 0, 0,
	1423, 0, 974, 0, 0, 0, 0, 1441, 0, 0,
	0, 1443, 1444, 0, 1445, 0, 0, 1447, 0, 1449,
	1426, 0, 1446, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1436, 0, 0, 1437, 1438, 0, 0, 0,
	0, 0, 0, 1215, 0, 0, 0, 0, 1468, 0,
	0, 0, 0, 0, 0, 0, 0, 1477, 0, 0,
	92, 0, 0, 0, 0, 0, 0, 0, 0, 92,
	0, 1255, 0, 0, 412, 1476, 0, 1059, 0, 0,
	0, 0, 1487, 1490, 92, 292, 0, 0, 0, 0,
	93, 92, 1486, 0, 0, 292, 292, 93, 93, 93,
	1455, 0, 0, 292, 0, 1510, 0, 292, 1505, 0,
	292, 0, 0, 1496, 292, 1498, 93, 0, 0, 0,
	0, 93, 93, 93, 292, 93, 93, 1508, 0, 0,
	0, 0, 0, 92, 92, 0, 92, 1516, 93, 93,
	1509, 92, 0, 92, 92, 92, 291, 0, 0, 1530,
	92, 1531, 1533, 1534, 1523, 1529, 372, 1368, 0, 0,
	1521, 1535, 0, 1525, 0, 1536, 1542, 92, 291, 0,
	1549, 0, 0, 0, 0, 1557, 0, 1550, 0, 1551,
	0, 0, 662, 661, 671, 672, 664, 665, 666, 667,
	668, 669, 670, 663, 1570, 91, 673, 0, 0, 0,
	1578, 1501, 0, 0, 0, 92, 0, 325, 0, 1576,
	1577, 0, 1368, 93, 0, 0, 92, 92, 0, 0,
	0, 0, 1591, 1558, 0, 0, 0, 0, 1592, 0,
	0, 0, 92, 1505, 1059, 0, 442, 1215, 0, 570,
	1598, 0, 0, 291, 0, 0, 93, 93, 0, 0,
	0, 92, 0, 0, 1454, 0, 0, 1606, 0, 0,
	0, 0, 0, 0, 93, 0, 0, 375, 29, 1611,
	292, 92, 1613, 0, 93, 0, 0, 0, 292, 1615,
	292, 0, 0, 0, 1626, 0, 0, 0, 292, 292,
	292, 1637, 0, 0, 0, 0, 93, 29, 1601, 93,
	0, 0, 30, 31, 32, 60, 34, 35, 1453, 0,
	93, 93, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 64, 0, 0, 0, 0, 36, 55, 56,
	0, 58, 0, 0, 0, 405, 662, 661, 671, 672,
	664, 665, 666, 667, 668, 669, 670, 663, 0, 0,
	673, 0, 45, 0, 0, 0, 59, 0, 0, 0,
	0, 0, 0, 0, 292, 93, 0, 93, 0, 0,
	0, 0, 0, 292, 292, 292, 292, 292, 0, 0,
	292, 292, 0, 0, 292, 93, 0, 0, 0, 0,
	662, 661, 671, 672, 664, 665, 666, 667, 668, 669,
	670, 663, 292, 0, 673, 0, 427, 292, 0, 292,
	292, 1153, 0, 292, 93, 0, 0, 0, 0, 0,
	0, 0, 38, 39, 41, 40, 43, 0, 57, 0,
	0, 662, 661, 671, 672, 664, 665, 666, 667, 668,
	669, 670, 663, 0, 0, 673, 0, 0, 0, 0,
	0, 44, 63, 62, 0, 0, 53, 54, 42, 0,
	0, 0, 442, 0, 442, 337, 0, 0, 0, 0,
	0, 442, 46, 47, 0, 48, 49, 50, 51, 657,
	0, 660, 0, 637, 639, 0, 0, 674, 675, 676,
	677, 678, 679, 680, 0, 658, 659, 656, 662, 661,
	671, 672, 664, 665, 666, 667, 668, 669, 670, 663,
	0, 0, 673, 0, 0, 0, 0, 0, 292, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	292, 292, 292, 292, 292, 0, 0, 0, 0, 0,
	0, 0, 292, 0, 0, 0, 292, 0, 0, 0,
	292, 0, 0, 0, 0, 292, 292, 0, 0, 292,
	292, 292, 0, 0, 0, 61, 0, 0, 0, 0,
	0, 0, 0, 619, 93, 619, 0, 340, 0, 0,
	0, 0, 619, 0, 758, 0, 0, 0, 0, 0,
	0, 0, 442, 0, 0, 0, 29, 0, 789, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 682,
	684, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 93, 662, 661, 671, 672, 664, 665,
	666, 667, 668, 669, 670, 663, 0, 0, 673, 0,
	697, 0, 0, 0, 702, 703, 704, 705, 706, 707,
	708, 709, 93, 712, 715, 715, 715, 721, 715, 715,
	721, 715, 729, 730, 731, 732, 733, 734, 735, 0,
	0, 0, 0, 29, 0, 0, 93, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	771, 0, 951, 952, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 292, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 0, 0, 0, 0, 0, 93, 93,
	442, 0, 0, 0, 0, 0, 0, 442, 442, 442,
	984, 0, 0, 0, 0, 0, 654, 0, 0, 0,
	0, 0, 0, 0, 93, 0, 442, 292, 0, 0,
	0, 442, 442, 442, 0, 442, 442, 0, 0, 0,
	0, 93, 0, 93, 93, 0, 0, 0, 442, 442,
	0, 0, 337, 0, 0, 0, 0, 0, 0, 0,
	0, 711, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 292, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 742, 745, 0,
	0, 292, 0, 0, 0, 0, 0, 93, 0, 0,
	93, 93, 93, 292, 0, 0, 0, 0, 0, 0,
	0, 619, 0, 0, 0, 0, 0, 0, 619, 619,
	619, 0, 0, 942, 0, 442, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 619, 0, 972,
	0, 0, 619, 619, 619, 0, 619, 619, 0, 0,
	0, 0, 0, 0, 0, 0, 976, 977, 0, 619,
	619, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 997, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 758, 0, 93, 442, 0, 0,
	0, 0, 0, 0, 0, 93, 687, 688, 689, 690,
	691, 692, 693, 694, 695, 696, 442, 0, 0, 442,
	93, 0, 1154, 0, 0, 0, 1155, 93, 0, 0,
	442, 570, 0, 0, 0, 0, 0, 1162, 1163, 0,
	0, 0, 0, 1169, 0, 0, 1172, 1173, 0, 0,
	0, 0, 0, 0, 1179, 0, 0, 0, 1181, 0,
	0, 1184, 1185, 1186, 1187, 1188, 0, 0, 0, 93,
	93, 0, 93, 0, 0, 0, 0, 93, 0, 93,
	93, 93, 292, 0, 0, 442, 93, 442, 0, 0,
	877, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 95, 96, 93, 292, 442, 0, 0, 0, 0,
	1230, 1231, 0, 0, 0, 0, 0, 894, 0, 1029,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1143, 0, 903, 904, 905, 906,
	0, 93, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 93, 295, 0, 0, 0, 0, 0,
	0, 0, 0, 298, 0, 0, 0, 0, 93, 0,
	0, 307, 0, 0, 0, 0, 0, 0, 0, 292,
	0, 0, 0, 0, 0, 0, 0, 93, 0, 0,
	0, 956, 957, 0, 0, 0, 619, 0, 619, 0,
	0, 0, 0, 0, 0, 305, 0, 93, 0, 0,
	0, 312, 0, 0, 0, 0, 619, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1324,
	1325, 296, 0, 0, 0, 0, 0, 0, 0, 972,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 309, 299,
	0, 310, 311, 318, 1053, 0, 0, 302, 304, 315,
	300, 301, 320, 319, 0, 297, 317, 316, 0, 0,
	0, 0, 0, 0, 442, 1158, 0, 0, 405, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 912, 0, 1386, 921, 922, 923, 924,
	925, 926, 927, 928, 929, 930, 931, 932, 933, 934,
	935, 0, 373, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1285, 442, 0, 0, 0, 0, 0, 771,
	0, 0, 0, 0, 0, 0, 0, 1211, 1212, 0,
	0, 771, 771, 771, 771, 771, 0, 0, 0, 0,
	0, 0, 442, 975, 0, 290, 0, 1029, 321, 1237,
	0, 0, 0, 0, 0, 290, 771, 0, 0, 0,
	771, 0, 0, 0, 0, 0, 442, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 428, 428, 1440,
	0, 0, 0, 1442, 0, 0, 290, 442, 290, 0,
	0, 0, 0, 0, 1451, 1452, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 442, 0, 0, 972, 0, 0, 1371, 1373,
	0, 0, 1470, 1471, 619, 1474, 0, 1178, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1485, 1373, 0, 1192, 1193, 745, 0,
	0, 0, 0, 619, 0, 0, 0, 0, 0, 0,
	0, 442, 0, 442, 1403, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1428, 0, 0,
	1433, 1434, 1435, 0, 0, 0, 0, 1369, 0, 29,
	0, 0, 0, 0, 0, 1532, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1148, 1149, 1150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 771, 0,
	0, 0, 0, 0, 1559, 1560, 1561, 1562, 0, 1566,
	0, 1567, 1568, 0, 0, 0, 0, 0, 0, 0,
	290, 0, 972, 0, 1573, 290, 1574, 1575, 0, 0,
	0, 290, 0, 0, 0, 0, 0, 290, 0, 0,
	0, 0, 0, 0, 0, 0, 442, 0, 0, 0,
	0, 0, 0, 0, 0, 1492, 1594, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	442, 0, 0, 0, 1350, 0, 0, 442, 0, 0,
	0, 1603, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1360,
	0, 0, 0, 0, 0, 1457, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1526,
	1527, 0, 1528, 1638, 1639, 0, 0, 1492, 0, 1492,
	1492, 1492, 0, 0, 0, 0, 1403, 0, 0, 0,
	0, 0, 0, 0, 0, 1482, 1483, 1484, 0, 0,
	0, 0, 0, 1492, 0, 0, 0, 0, 428, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 290, 0, 290, 778, 0, 0, 0,
	0, 619, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1583, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 442, 442, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 972, 0, 1599, 0,
	1322, 1323, 0, 0, 0, 0, 0, 1369, 0, 29,
	0, 0, 0, 0, 0, 1343, 1344, 1605, 1345, 1346,
	0, 0, 0, 0, 0, 0, 0, 0, 1460, 0,
	1353, 1354, 0, 0, 0, 0, 0, 1492, 0, 0,
	1554, 0, 0, 0, 0, 0, 337, 0, 0, 0,
	0, 0, 0, 1478, 0, 0, 1479, 0, 0, 1481,
	0, 0, 1369, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 290, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 290, 290, 0, 0, 0, 0, 0, 0, 290,
	0, 0, 0, 290, 0, 1411, 290, 0, 0, 0,
	872, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	290, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1520, 337, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1624, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1439,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	428, 872, 0, 0, 0, 428, 428, 0, 0, 428,
	428, 428, 0, 0, 0, 973, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 428, 428, 428, 428, 428, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 290, 428, 0, 0,
	0, 0, 0, 872, 290, 0, 290, 0, 0, 0,
	0, 0, 0, 0, 290, 1034, 290, 0, 0, 0,
	0, 1511, 1512, 1513, 1514, 1515, 0, 0, 0, 1518,
	1519, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	290, 0, 0, 0, 0, 0, 0, 0, 0, 290,
	290, 290, 290, 290, 0, 0, 290, 290, 0, 0,
	290, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 290, 0,
	0, 0, 0, 290, 0, 1140, 1141, 0, 0, 290,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 428, 428, 0,
	0, 0, 1630, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 428, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 290, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 973, 290, 290, 290, 290,
	290, 0, 0, 0, 0, 0, 0, 0, 1229, 0,
	0, 0, 290, 0, 0, 0, 1034, 0, 0, 0,
	0, 290, 290, 0, 0, 290, 1245, 872, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 428, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 872, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 290,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 973, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 290, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 290, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 290,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 973, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1034, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	290, 0, 0, 0, 0, 553, 541, 0, 0, 497,
	556, 470, 487, 564, 488, 491, 528, 455, 510, 184,
	485, 0, 474, 450, 481, 451, 472, 499, 126, 503,
	469, 543, 513, 555, 155, 0, 475, 530, 224, 562,
	158, 519, 0, 232, 172, 0, 0, 0, 501, 545,
	508, 538, 496, 529, 460, 518, 557, 486, 526, 558,
	0, 0, 973, 94, 95, 96, 0, 1060, 1061, 0,
	0, 0, 0, 0, 116, 290, 523, 552, 483, 525,
	527, 566, 449, 520, 0, 453, 456, 563, 548, 478,
	479, 1256, 0, 0, 0, 0, 0, 0, 500, 509,
	535, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	476, 0, 517, 0, 0, 0, 457, 454, 0, 0,
	0, 0, 498, 0, 0, 0, 459, 0, 477, 536,
	0, 447, 135, 540, 547, 495, 293, 551, 493, 492,
	554, 203, 0, 236, 139, 154, 112, 151, 98, 108,
	0, 137, 181, 211, 215, 544, 473, 482, 120, 480,
	213, 191, 253, 516, 193, 212, 159, 242, 204, 252,
	262, 263, 239, 260, 271, 229, 101, 238, 250, 117,
	223, 0, 0, 0, 103, 248, 235, 170, 148, 149,
	102, 0, 209, 125, 133, 122, 183, 245, 246, 121,
	274, 109, 259, 105, 110, 258, 177, 241, 249, 171,
	164, 104, 247, 169, 163, 153, 129, 141, 201, 161,
	202, 142, 174, 173, 175, 0, 452, 0, 233, 256,
	275, 114, 468, 240, 267, 270, 0, 205, 115, 134,
	128, 200, 132, 156, 266, 268, 269, 176, 111, 144,
	230, 152, 160, 208, 273, 190, 214, 118, 255, 231,
	464, 467, 462, 463, 511, 512, 559, 560, 561, 537,
	458, 0, 465, 466, 0, 542, 549, 550, 515, 97,
	106, 157, 272, 206, 131, 257, 448, 461, 124, 471,
	0, 0, 484, 489, 490, 502, 504, 505, 506, 507,
	514, 521, 522, 524, 531, 532, 533, 534, 539, 546,
	565, 99, 100, 107, 113, 119, 123, 127, 130, 136,
	140, 143, 145, 146, 147, 150, 162, 165, 166, 167,
	168, 178, 179, 180, 182, 185, 186, 187, 188, 189,
	192, 194, 195, 196, 197, 198, 199, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 225, 226, 227, 228,
	234, 237, 243, 244, 254, 261, 264, 138, 251, 265,
	553, 541, 0, 0, 497, 556, 470, 487, 564, 488,
	491, 528, 455, 510, 184, 485, 0, 474, 450, 481,
	451, 472, 499, 126, 503, 469, 543, 513, 555, 155,
	0, 475, 530, 224, 562, 158, 519, 0, 232, 172,
	0, 0, 0, 501, 545, 508, 538, 496, 529, 460,
	518, 557, 486, 526, 558, 0, 0, 0, 94, 95,
	96, 0, 1060, 1061, 0, 0, 0, 0, 0, 116,
	0, 523, 552, 483, 525, 527, 566, 449, 520, 0,
	453, 456, 563, 548, 478, 479, 0, 0, 0, 0,
	0, 0, 0, 500, 509, 535, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 476, 0, 517, 0, 0,
	0, 457, 454, 0, 0, 0, 0, 498, 0, 0,
	0, 459, 0, 477, 536, 0, 447, 135, 540, 547,
	495, 293, 551, 493, 492, 554, 203, 0, 236, 139,
	154, 112, 151, 98, 108, 0, 137, 181, 211, 215,
	544, 473, 482, 120, 480, 213, 191, 253, 516, 193,
	212, 159, 242, 204, 252, 262, 263, 239, 260, 271,
	229, 101, 238, 250, 117, 223, 0, 0, 0, 103,
	248, 235, 170, 148, 149, 102, 0, 209, 125, 133,
	122, 183, 245, 246, 121, 274, 109, 259, 105, 110,
	258, 177, 241, 249, 171, 164, 104, 247, 169, 163,
	153, 129, 141, 201, 161, 202, 142, 174, 173, 175,
	0, 452, 0, 233, 256, 275, 114, 468, 240, 267,
	270, 0, 205, 115, 134, 128, 200, 132, 156, 266,
	268, 269, 176, 111, 144, 230, 152, 160, 208, 273,
	190, 214, 118, 255, 231, 464, 467, 462, 463, 511,
	512, 559, 560, 561, 537, 458, 0, 465, 466, 0,
	542, 549, 550, 515, 97, 106, 157, 272, 206, 131,
	257, 448, 461, 124, 471, 0, 0, 484, 489, 490,
	502, 504, 505, 506, 507, 514, 521, 522, 524, 531,
	532, 533, 534, 539, 546, 565, 99, 100, 107, 113,
	119, 123, 127, 130, 136, 140, 143, 145, 146, 147,
	150, 162, 165, 166, 167, 168, 178, 179, 180, 182,
	185, 186, 187, 188, 189, 192, 194, 195, 196, 197,
	198, 199, 207, 210, 216, 217, 218, 219, 220, 221,
	222, 225, 226, 227, 228, 234, 237, 243, 244, 254,
	261, 264, 138, 251, 265, 553, 541, 0, 0, 497,
	556, 470, 487, 564, 488, 491, 528, 455, 510, 184,
	485, 0, 474, 450, 481, 451, 472, 499, 126, 503,
	469, 543, 513, 555, 155, 0, 475, 530, 224, 562,
	158, 519, 0, 232, 172, 0, 0, 0, 501, 545,
	508, 538, 496, 529, 460, 518, 557, 486, 526, 558,
	59, 0, 0, 94, 95, 96, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 0, 523, 552, 483, 525,
	527, 566, 449, 520, 0, 453, 456, 563, 548, 478,
	479, 0, 0, 0, 0, 0, 0, 0, 500, 509,
	535, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	476, 0, 517, 0, 0, 0, 457, 454, 0, 0,
	0, 0, 498, 0, 0, 0, 459, 0, 477, 536,
	0, 447, 135, 540, 547, 495, 293, 551, 493, 492,
	554, 203, 0, 236, 139, 154, 112, 151, 98, 108,
	0, 137, 181, 211, 215, 544, 473, 482, 120, 480,
	213, 191, 253, 516, 193, 212, 159, 242, 204, 252,
	262, 263, 239, 260, 271, 229, 101, 238, 250, 117,
	223, 0, 0, 0, 103, 248, 235, 170, 148, 149,
	102, 0, 209, 125, 133, 122, 183, 245, 246, 121,
	274, 109, 259, 105, 110, 258, 177, 241, 249, 171,
	164, 104, 247, 169, 163, 153, 129, 141, 201, 161,
	202, 142, 174, 173, 175, 0, 452, 0, 233, 256,
	275, 114, 468, 240, 267, 270, 0, 205, 115, 134,
	128, 200, 132, 156, 266, 268, 269, 176, 111, 144,
	230, 152, 160, 208, 273, 190, 214, 118, 255, 231,
	464, 467, 462, 463, 511, 512, 559, 560, 561, 537,
	458, 0, 465, 466, 0, 542, 549, 550, 515, 97,
	106, 157, 272, 206, 131, 257, 448, 461, 124, 471,
	0, 0, 484, 489, 490, 502, 504, 505, 506, 507,
	514, 521, 522, 524, 531, 532, 533, 534, 539, 546,
	565, 99, 100, 107, 113, 119, 123, 127, 130, 136,
	140, 143, 145, 146, 147, 150, 162, 165, 166, 167,
	168, 178, 179, 180, 182, 185, 186, 187, 188, 189,
	192, 194, 195, 196, 197, 198, 199, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 225, 226, 227, 228,
	234, 237, 243, 244, 254, 261, 264, 138, 251, 265,
	553, 541, 0, 0, 497, 556, 470, 487, 564, 488,
	491, 528, 455, 510, 184, 485, 0, 474, 450, 481,
	451, 472, 499, 126, 503, 469, 543, 513, 555, 155,
	0, 475, 530, 224, 562, 158, 519, 0, 232, 172,
	0, 0, 0, 501, 545, 508, 538, 496, 529, 460,
	518, 557, 486, 526, 558, 0, 0, 0, 94, 95,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	0, 523, 552, 483, 525, 527, 566, 449, 520, 0,
	453, 456, 563, 548, 478, 479, 0, 0, 0, 0,
	0, 0, 0, 500, 509, 535, 494, 0, 0, 0,
	0, 0, 0, 1361, 0, 476, 0, 517, 0, 0,
	0, 457, 454, 0, 0, 0, 0, 498, 0, 0,
	0, 459, 0, 477, 536, 0, 447, 135, 540, 547,
	495, 293, 551, 493, 492, 554, 203, 0, 236, 139,
	154, 112, 151, 98, 108, 0, 137, 181, 211, 215,
	544, 473, 482, 120, 480, 213, 191, 253, 516, 193,
	212, 159, 242, 204, 252, 262, 263, 239, 260, 271,
	229, 101, 238, 250, 117, 223, 0, 0, 0, 103,
	248, 235, 170, 148, 149, 102, 0, 209, 125, 133,
	122, 183, 245, 246, 121, 274, 109, 259, 105, 110,
	258, 177, 241, 249, 171, 164, 104, 247, 169, 163,
	153, 129, 141, 201, 161, 202, 142, 174, 173, 175,
	0, 452, 0, 233, 256, 275, 114, 468, 240, 267,
	270, 0, 205, 115, 134, 128, 200, 132, 156, 266,
	268, 269, 176, 111, 144, 230, 152, 160, 208, 273,
	190, 214, 118, 255, 231, 464, 467, 462, 463, 511,
	512, 559, 560, 561, 537, 458, 0, 465, 466, 0,
	542, 549, 550, 515, 97, 106, 157, 272, 206, 131,
	257, 448, 461, 124, 471, 0, 0, 484, 489, 490,
	502, 504, 505, 506, 507, 514, 521, 522, 524, 531,
	532, 533, 534, 539, 546, 565, 99, 100, 107, 113,
	119, 123, 127, 130, 136, 140, 143, 145, 146, 147,
	150, 162, 165, 166, 167, 168, 178, 179, 180, 182,
	185, 186, 187, 188, 189, 192, 194, 195, 196, 197,
	198, 199, 207, 210, 216, 217, 218, 219, 220, 221,
	222, 225, 226, 227, 228, 234, 237, 243, 244, 254,
	261, 264, 138, 251, 265, 553, 541, 0, 0, 497,
	556, 470, 487, 564, 488, 491, 528, 455, 510, 184,
	485, 0, 474, 450, 481, 451, 472, 499, 126, 503,
	469, 543, 513, 555, 155, 0, 475, 530, 224, 562,
	158, 519, 0, 232, 172, 0, 0, 0, 501, 545,
	508, 538, 496, 529, 460, 518, 557, 486, 526, 558,
	0, 0, 0, 94, 95, 96, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 0, 523, 552, 483, 525,
	527, 566, 449, 520, 0, 453, 456, 563, 548, 478,
	479, 0, 0, 0, 0, 0, 0, 0, 500, 509,
	535, 494, 0, 0, 0, 0, 0, 0, 1246, 0,
	476, 0, 517, 0, 0, 0, 457, 454, 0, 0,
	0, 0, 498, 0, 0, 0, 459, 0, 477, 536,
	0, 447, 135, 540, 547, 495, 293, 551, 493, 492,
	554, 203, 0, 236, 139, 154, 112, 151, 98, 108,
	0, 137, 181, 211, 215, 544, 473, 482, 120, 480,
	213, 191, 253, 516, 193, 212, 159, 242, 204, 252,
	262, 263, 239, 260, 271, 229, 101, 238, 250, 117,
	223, 0, 0, 0, 103, 248, 235, 170, 148, 149,
	102, 0, 209, 125, 133, 122, 183, 245, 246, 121,
	274, 109, 259, 105, 110, 258, 177, 241, 249, 171,
	164, 104, 247, 169, 163, 153, 129, 141, 201, 161,
	202, 142, 174, 173, 175, 0, 452, 0, 233, 256,
	275, 114, 468, 240, 267, 270, 0, 205, 115, 134,
	128, 200, 132, 156, 266, 268, 269, 176, 111, 144,
	230, 152, 160, 208, 273, 190, 214, 118, 255, 231,
	464, 467, 462, 463, 511, 512, 559, 560, 561, 537,
	458, 0, 465, 466, 0, 542, 549, 550, 515, 97,
	106, 157, 272, 206, 131, 257, 448, 461, 124, 471,
	0, 0, 484, 489, 490, 502, 504, 505, 506, 507,
	514, 521, 522, 524, 531, 532, 533, 534, 539, 546,
	565, 99, 100, 107, 113, 119, 123, 127, 130, 136,
	140, 143, 145, 146, 147, 150, 162, 165, 166, 167,
	168, 178, 179, 180, 182, 185, 186, 187, 188, 189,
	192, 194, 195, 196, 197, 198, 199, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 225, 226, 227, 228,
	234, 237, 243, 244, 254, 261, 264, 138, 251, 265,
	553, 541, 0, 0, 497, 556, 470, 487, 564, 488,
	491, 528, 455, 510, 184, 485, 0, 474, 450, 481,
	451, 472, 499, 126, 503, 469, 543, 513, 555, 155,
	0, 475, 530, 224, 562, 158, 519, 0, 232, 172,
	0, 0, 0, 501, 545, 508, 538, 496, 529, 460,
	518, 557, 486, 526, 558, 0, 0, 0, 94, 95,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	0, 523, 552, 483, 525, 527, 566, 449, 520, 0,
	453, 456, 563, 548, 478, 479, 0, 0, 0, 0,
	0, 0, 0, 500, 509, 535, 494, 0, 0, 0,
	0, 0, 0, 1006, 0, 476, 0, 517, 0, 0,
	0, 457, 454, 0, 0, 0, 0, 498, 0, 0,
	0, 459, 0, 477, 536, 0, 447, 135, 540, 547,
	495, 293, 551, 493, 492, 554, 203, 0, 236, 139,
	154, 112, 151, 98, 108, 0, 137, 181, 211, 215,
	544, 473, 482, 120, 480, 213, 191, 253, 516, 193,
	212, 159, 242, 204, 252, 262, 263, 239, 260, 271,
	229, 101, 238, 250, 117, 223, 0, 0, 0, 103,
	248, 235, 170, 148, 149, 102, 0, 209, 125, 133,
	122, 183, 245, 246, 121, 274, 109, 259, 105, 110,
	258, 177, 241, 249, 171, 164, 104, 247, 169, 163,
	153, 129, 141, 201, 161, 202, 142, 174, 173, 175,
	0, 452, 0, 233, 256, 275, 114, 468, 240, 267,
	270, 0, 205, 115, 134, 128, 200, 132, 156, 266,
	268, 269, 176, 111, 144, 230, 152, 160, 208, 273,
	190, 214, 118, 255, 231, 464, 467, 462, 463, 511,
	512, 559, 560, 561, 537, 458, 0, 465, 466, 0,
	542, 549, 550, 515, 97, 106, 157, 272, 206, 131,
	257, 448, 461, 124, 471, 0, 0, 484, 489, 490,
	502, 504, 505, 506, 507, 514, 521, 522, 524, 531,
	532, 533, 534, 539, 546, 565, 99, 100, 107, 113,
	119, 123, 127, 130, 136, 140, 143, 145, 146, 147,
	150, 162, 165, 166, 167, 168, 178, 179, 180, 182,
	185, 186, 187, 188, 189, 192, 194, 195, 196, 197,
	198, 199, 207, 210, 216, 217, 218, 219, 220, 221,
	222, 225, 226, 227, 228, 234, 237, 243, 244, 254,
	261, 264, 138, 251, 265, 553, 541, 0, 0, 497,
	556, 470, 487, 564, 488, 491, 528, 455, 510, 184,
	485, 0, 474, 450, 481, 451, 472, 499, 126, 503,
	469, 543, 513, 555, 155, 0, 475, 530, 224, 562,
	158, 519, 0, 232, 172, 0, 0, 0, 501, 545,
	508, 538, 496, 529, 460, 518, 557, 486, 526, 558,
	0, 0, 0, 94, 95, 96, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 0, 523, 552, 483, 525,
	527, 566, 449, 520, 0, 453, 456, 563, 548, 478,
	479, 0, 0, 0, 0, 0, 0, 0, 500, 509,
	535, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	476, 0, 517, 0, 0, 0, 457, 454, 0, 0,
	0, 0, 498, 0, 0, 0, 459, 0, 477, 536,
	0, 447, 135, 540, 547, 495, 293, 551, 493, 492,
	554, 203, 0, 236, 139, 154, 112, 151, 98, 108,
	0, 137, 181, 211, 215, 544, 473, 482, 120, 480,
	213, 191, 253, 516, 193, 212, 159, 242, 204, 252,
	262, 263, 239, 260, 271, 229, 101, 238, 250, 117,
	223, 0, 0, 0, 103, 248, 235, 170, 148, 149,
	102, 0, 209, 125, 133, 122, 183, 245, 246, 121,
	274, 109, 259, 105, 110, 258, 177, 241, 249, 171,
	164, 104, 247, 169, 163, 153, 129, 141, 201, 161,
	202, 142, 174, 173, 175, 0, 452, 0, 233, 256,
	275, 114, 468, 240, 267, 270, 0, 205, 115, 134,
	128, 200, 132, 156, 266, 268, 269, 176, 111, 144,
	230, 152, 160, 208, 273, 190, 214, 118, 255, 231,
	464, 467, 462, 463, 511, 512, 559, 560, 561, 537,
	458, 0, 465, 466, 0, 542, 549, 550, 515, 97,
	106, 157, 272, 206, 131, 257, 448, 461, 124, 471,
	0, 0, 484, 489, 490, 502, 504, 505, 506, 507,
	514, 521, 522, 524, 531, 532, 533, 534, 539, 546,
	565, 99, 100, 107, 113, 119, 123, 127, 130, 136,
	140, 143, 145, 146, 147, 150, 162, 165, 166, 167,
	168, 178, 179, 180, 182, 185, 186, 187, 188, 189,
	192, 194, 195, 196, 197, 198, 199, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 225, 226, 227, 228,
	234, 237, 243, 244, 254, 261, 264, 138, 251, 265,
	553, 541, 0, 0, 497, 556, 470, 487, 564, 488,
	491, 528, 455, 510, 184, 485, 0, 474, 450, 481,
	451, 472, 499, 126, 503, 469, 543, 513, 555, 155,
	0, 475, 530, 224, 562, 158, 519, 0, 232, 172,
	0, 0, 0, 501, 545, 508, 538, 496, 529, 460,
	518, 557, 486, 526, 558, 0, 0, 0, 94, 95,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	0, 523, 552, 483, 525, 527, 566, 449, 520, 0,
	453, 456, 563, 548, 478, 479, 0, 0, 0, 0,
	0, 0, 0, 500, 509, 535, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 476, 0, 517, 0, 0,
	0, 457, 454, 0, 0, 0, 0, 498, 0, 0,
	0, 459, 0, 477, 536, 0, 447, 135, 540, 547,
	495, 293, 551, 493, 492, 554, 203, 0, 236, 139,
	154, 112, 151, 98, 108, 0, 137, 181, 211, 215,
	544, 473, 482, 120, 480, 213, 191, 253, 516, 193,
	212, 159, 242, 204, 252, 262, 263, 239, 260, 271,
	229, 101, 238, 250, 117, 223, 0, 0, 0, 103,
	248, 235, 170, 148, 149, 102, 0, 209, 125, 133,
	122, 183, 245, 246, 121, 274, 109, 259, 105, 445,
	258, 177, 241, 249, 171, 164, 104, 247, 169, 163,
	153, 129, 141, 201, 161, 202, 142, 174, 173, 175,
	0, 452, 0, 233, 256, 275, 114, 468, 240, 267,
	270, 0, 205, 115, 134, 128, 200, 132, 156, 266,
	268, 269, 446, 444, 439, 438, 152, 160, 208, 273,
	190, 214, 118, 255, 231, 464, 467, 462, 463, 511,
	512, 559, 560, 561, 537, 458, 0, 465, 466, 0,
	542, 549, 550, 515, 97, 106, 157, 272, 206, 131,
	257, 448, 461, 124, 471, 0, 0, 484, 489, 490,
	502, 504, 505, 506, 507, 514, 521, 522, 524, 531,
	532, 533, 534, 539, 546, 565, 99, 100, 107, 113,
	119, 123, 127, 130, 136, 140, 143, 145, 146, 147,
	150, 162, 165, 166, 167, 168, 178, 179, 180, 182,
	185, 186, 187, 188, 189, 192, 194, 195, 196, 197,
	198, 199, 207, 210, 216, 217, 218, 219, 220, 221,
	222, 225, 226, 227, 228, 234, 237, 243, 244, 254,
	261, 264, 138, 251, 265, 553, 541, 0, 0, 497,
	556, 470, 487, 564, 488, 491, 528, 455, 510, 184,
	485, 0, 474, 450, 481, 451, 472, 499, 126, 503,
	469, 543, 513, 555, 155, 0, 475, 530, 224, 562,
	158, 519, 0, 232, 172, 0, 0, 0, 501, 545,
	508, 538, 496, 529, 460, 518, 557, 486, 526, 558,
	0, 0, 0, 94, 95, 96, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 0, 523, 552, 483, 525,
	527, 566, 449, 520, 0, 453, 456, 563, 548, 478,
	479, 0, 0, 0, 0, 0, 0, 0, 500, 509,
	535, 494, 0, 0, 0, 0, 0, 0, 0, 0,
	476, 0, 517, 0, 0, 0, 457, 454, 0, 0,
	0, 0, 498, 0, 0, 0, 459, 0, 477, 536,
	0, 447, 135, 540, 547, 495, 293, 551, 493, 492,
	554, 203, 0, 236, 139, 154, 112, 151, 98, 108,
	0, 137, 181, 211, 215, 544, 473, 482, 120, 480,
	213, 191, 253, 516, 193, 212, 159, 242, 204, 252,
	262, 263, 239, 260, 271, 229, 101, 238, 780, 117,
	223, 0, 0, 0, 103, 248, 235, 170, 148, 149,
	102, 0, 209, 125, 133, 122, 183, 245, 246, 121,
	274, 109, 259, 105, 445, 258, 177, 241, 249, 171,
	164, 104, 247, 169, 163, 153, 129, 141, 201, 161,
	202, 142, 174, 173, 175, 0, 452, 0, 233, 256,
	275, 114, 468, 240, 267, 270, 0, 205, 115, 134,
	128, 200, 132, 156, 266, 268, 269, 446, 444, 439,
	438, 152, 160, 208, 273, 190, 214, 118, 255, 231,
	464, 467, 462, 463, 511, 512, 559, 560, 561, 537,
	458, 0, 465, 466, 0, 542, 549, 550, 515, 97,
	106, 157, 272, 206, 131, 257, 448, 461, 124, 471,
	0, 0, 484, 489, 490, 502, 504, 505, 506, 507,
	514, 521, 522, 524, 531, 532, 533, 534, 539, 546,
	565, 99, 100, 107, 113, 119, 123, 127, 130, 136,
	140, 143, 145, 146, 147, 150, 162, 165, 166, 167,
	168, 178, 179, 180, 182, 185, 186, 187, 188, 189,
	192, 194, 195, 196, 197, 198, 199, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 225, 226, 227, 228,
	234, 237, 243, 244, 254, 261, 264, 138, 251, 265,
	553, 541, 0, 0, 497, 556, 470, 487, 564, 488,
	491, 528, 455, 510, 184, 485, 0, 474, 450, 481,
	451, 472, 499, 126, 503, 469, 543, 513, 555, 155,
	0, 475, 530, 224, 562, 158, 519, 0, 232, 172,
	0, 0, 0, 501, 545, 508, 538, 496, 529, 460,
	518, 557, 486, 526, 558, 0, 0, 0, 94, 95,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 116,
	0, 523, 552, 483, 525, 527, 566, 449, 520, 0,
	453, 456, 563, 548, 478, 479, 0, 0, 0, 0,
	0, 0, 0, 500, 509, 535, 494, 0, 0, 0,
	0, 0, 0, 0, 0, 476, 0, 517, 0, 0,
	0, 457, 454, 0, 0, 0, 0, 498, 0, 0,
	0, 459, 0, 477, 536, 0, 447, 135, 540, 547,
	495, 293, 551, 493, 492, 554, 203, 0, 236, 139,
	154, 112, 151, 98, 108, 0, 137, 181, 211, 215,
	544, 473, 482, 120, 480, 213, 191, 253, 516, 193,
	212, 159, 242, 204, 252, 262, 263, 239, 260, 271,
	229, 101, 238, 436, 117, 223, 0, 0, 0, 103,
	248, 235, 170, 148, 149, 102, 0, 209, 125, 133,
	122, 183, 245, 246, 121, 274, 109, 259, 105, 445,
	258, 177, 241, 249, 171, 164, 104, 247, 169, 163,
	153, 129, 141, 201, 161, 202, 142, 174, 173, 175,
	0, 452, 0, 233, 256, 275, 114, 468, 240, 267,
	270, 0, 205, 115, 134, 128, 200, 132, 156, 266,
	268, 269, 446, 444, 439, 438, 152, 160, 208, 273,
	190, 214, 118, 255, 231, 464, 467, 462, 463, 511,
	512, 559, 560, 561, 537, 458, 0, 465, 466, 0,
	542, 549, 550, 515, 97, 106, 157, 272, 206, 131,
	257, 448, 461, 124, 471, 0, 0, 484, 489, 490,
	502, 504, 505, 506, 507, 514, 521, 522, 524, 531,
	532, 533, 534, 539, 546, 565, 99, 100, 107, 113,
	119, 123, 127, 130, 136, 140, 143, 145, 146, 147,
	150, 162, 165, 166, 167, 168, 178, 179, 180, 182,
	185, 186, 187, 188, 189, 192, 194, 195, 196, 197,
	198, 199, 207, 210, 216, 217, 218, 219, 220, 221,
	222, 225, 226, 227, 228, 234, 237, 243, 244, 254,
	261, 264, 138, 251, 265, 184, 0, 0, 944, 0,
	342, 0, 0, 0, 126, 0, 341, 0, 0, 0,
	155, 0, 945, 0, 224, 385, 158, 0, 0, 232,
	172, 0, 0, 0, 0, 0, 376, 377, 0, 0,
	0, 0, 0, 0, 0, 0, 59, 0, 0, 94,
	95, 96, 363, 362, 365, 366, 367, 368, 0, 0,
	116, 364, 369, 370, 371, 0, 0, 0, 0, 339,
	356, 0, 384, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 353, 354, 426, 0, 0, 0, 399, 0,
	355, 0, 0, 348, 349, 351, 350, 352, 357, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 135, 398,
	0, 0, 293, 0, 0, 396, 0, 203, 0, 236,
	139, 154, 112, 151, 98, 108, 0, 137, 181, 211,
	215, 0, 0, 0, 120, 0, 213, 191, 253, 0,
	193, 212, 159, 242, 204, 252, 262, 263, 239, 260,
	271, 229, 101, 238, 250, 117, 223, 0, 0, 0,
	103, 248, 235, 170, 148, 149, 102, 0, 209, 125,
	133, 122, 183, 245, 246, 121, 274, 109, 259, 105,
	110, 258, 177, 241, 249, 171, 164, 104, 247, 169,
	163, 153, 129, 141, 201, 161, 202, 142, 174, 173,
	175, 0, 0, 0, 233, 256, 275, 114, 0, 240,
	267, 270, 0, 205, 115, 134, 128, 200, 132, 156,
	266, 268, 269, 176, 111, 144, 230, 152, 160, 208,
	273, 190, 214, 118, 255, 231, 386, 397, 392, 393,
	390, 391, 389, 388, 387, 400, 378, 379, 380, 381,
	383, 0, 394, 395, 382, 97, 106, 157, 272, 206,
	131, 257, 0, 0, 124, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 100, 107,
	113, 119, 123, 127, 130, 136, 140, 143, 145, 146,
	147, 150, 162, 165, 166, 167, 168, 178, 179, 180,
	182, 185, 186, 187, 188, 189, 192, 194, 195, 196,
	197, 198, 199, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 225, 226, 227, 228, 234, 237, 243, 244,
	254, 261, 264, 138, 251, 265, 184, 0, 0, 0,
	0, 342, 0, 0, 0, 126, 0, 341, 0, 0,
	0, 155, 0, 0, 0, 224, 385, 158, 0, 0,
	232, 172, 0, 0, 0, 0, 0, 376, 377, 0,
	0, 0, 0, 0, 0, 1051, 0, 59, 0, 0,
	94, 95, 96, 363, 362, 365, 366, 367, 368, 0,
	0, 116, 364, 369, 370, 371, 1052, 0, 0, 0,
	339, 356, 0, 384, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 353, 354, 0, 0, 0, 0, 399,
	0, 355, 0, 0, 348, 349, 351, 350, 352, 357,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 135,
	398, 0, 0, 293, 0, 0, 396, 0, 203, 0,
	236, 139, 154, 112, 151, 98, 108, 0, 137, 181,
	211, 215, 0, 0, 0, 120, 0, 213, 191, 253,
	0, 193, 212, 159, 242, 204, 252, 262, 263, 239,
	260, 271, 229, 101, 238, 250, 117, 223, 0, 0,
	0, 103, 248, 235, 170, 148, 149, 102, 0, 209,
	125, 133, 122, 183, 245, 246, 121, 274, 109, 259,
	105, 110, 258, 177, 241, 249, 171, 164, 104, 247,
	169, 163, 153, 129, 141, 201, 161, 202, 142, 174,
	173, 175, 0, 0, 0, 233, 256, 275, 114, 0,
	240, 267, 270, 0, 205, 115, 134, 128, 200, 132,
	156, 266, 268, 269, 176, 111, 144, 230, 152, 160,
	208, 273, 190, 214, 118, 255, 231, 386, 397, 392,
	393, 390, 391, 389, 388, 387, 400, 378, 379, 380,
	381, 383, 0, 394, 395, 382, 97, 106, 157, 272,
	206, 131, 257, 0, 0, 124, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 100,
	107, 113, 119, 123, 127, 130, 136, 140, 143, 145,
	146, 147, 150, 162, 165, 166, 167, 168, 178, 179,
	180, 182, 185, 186, 187, 188, 189, 192, 194, 195,
	196, 197, 198, 199, 207, 210, 216, 217, 218, 219,
	220, 221, 222, 225, 226, 227, 228, 234, 237, 243,
	244, 254, 261, 264, 138, 251, 265, 184, 0, 0,
	0, 0, 342, 0, 0, 0, 126, 0, 341, 0,
	0, 0, 155, 0, 0, 0, 224, 385, 158, 0,
	0, 232, 172, 0, 0, 0, 0, 0, 376, 377,
	0, 0, 0, 0, 0, 0, 0, 0, 59, 0,
	413, 94, 95, 96, 363, 362, 365, 366, 367, 368,
	0, 0, 116, 364, 369, 370, 371, 0, 0, 0,
	0, 339, 356, 0, 384, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 353, 354, 0, 0, 0, 0,
	399, 0, 355, 0, 0, 348, 349, 351, 350, 352,
	357, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	135, 398, 0, 0, 293, 0, 0, 396, 0, 203,
	0, 236, 139, 154, 112, 151, 98, 108, 0, 137,
	181, 211, 215, 0, 0, 0, 120, 0, 213, 191,
	253, 0, 193, 212, 159, 242, 204, 252, 262, 263,
	239, 260, 271, 229, 101, 238, 250, 117, 223, 0,
	0, 0, 103, 248, 235, 170, 148, 149, 102, 0,
	209, 125, 133, 122, 183, 245, 246, 121, 274, 109,
	259, 105, 110, 258, 177, 241, 249, 171, 164, 104,
	247, 169, 163, 153, 129, 141, 201, 161, 202, 142,
	174, 173, 175, 0, 0, 0, 233, 256, 275, 114,
	0, 240, 267, 270, 0, 205, 115, 134, 128, 200,
	132, 156, 266, 268, 269, 176, 111, 144, 230, 152,
	160, 208, 273, 190, 214, 118, 255, 231, 386, 397,
	392, 393, 390, 391, 389, 388, 387, 400, 378, 379,
	380, 381, 383, 0, 394, 395, 382, 97, 106, 157,
	272, 206, 131, 257, 0, 0, 124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	100, 107, 113, 119, 123, 127, 130, 136, 140, 143,
	145, 146, 147, 150, 162, 165, 166, 167, 168, 178,
	179, 180, 182, 185, 186, 187, 188, 189, 192, 194,
	195, 196, 197, 198, 199, 207, 210, 216, 217, 218,
	219, 220, 221, 222, 225, 226, 227, 228, 234, 237,
	243, 244, 254, 261, 264, 138, 251, 265, 184, 0,
	0, 0, 0, 342, 0, 0, 0, 126, 0, 341,
	0, 0, 0, 155, 0, 0, 0, 224, 385, 158,
	0, 0, 232, 172, 0, 0, 0, 0, 0, 376,
	377, 0, 0, 0, 0, 0, 0, 0, 0, 59,
	0, 0, 94, 95, 96, 363, 362, 365, 366, 367,
	368, 0, 0, 116, 364, 369, 370, 371, 0, 0,
	0, 0, 339, 356, 0, 384, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 353, 354, 426, 0, 0,
	0, 399, 0, 355, 0, 0, 348, 349, 351, 350,
	352, 357, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 135, 398, 0, 0, 293, 0, 0, 396, 0,
	203, 0, 236, 139, 154, 112, 151, 98, 108, 0,
	137, 181, 211, 215, 0, 0, 0, 120, 0, 213,
	191, 253, 0, 193, 212, 159, 242, 204, 252, 262,
	263, 239, 260, 271, 229, 101, 238, 250, 117, 223,
	0, 0, 0, 103, 248, 235, 170, 148, 149, 102,
	0, 209, 125, 133, 122, 183, 245, 246, 121, 274,
	109, 259, 105, 110, 258, 177, 241, 249, 171, 164,
	104, 247, 169, 163, 153, 129, 141, 201, 161, 202,
	142, 174, 173, 175, 0, 0, 0, 233, 256, 275,
	114, 0, 240, 267, 270, 0, 205, 115, 134, 128,
	200, 132, 156, 266, 268, 269, 176, 111, 144, 230,
	152, 160, 208, 273, 190, 214, 118, 255, 231, 386,
	397, 392, 393, 390, 391, 389, 388, 387, 400, 378,
	379, 380, 381, 383, 0, 394, 395, 382, 97, 106,
	157, 272, 206, 131, 257, 0, 0, 124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 100, 107, 113, 119, 123, 127, 130, 136, 140,
	143, 145, 146, 147, 150, 162, 165, 166, 167, 168,
	178, 179, 180, 182, 185, 186, 187, 188, 189, 192,
	194, 195, 196, 197, 198, 199, 207, 210, 216, 217,
	218, 219, 220, 221, 222, 225, 226, 227, 228, 234,
	237, 243, 244, 254, 261, 264, 138, 251, 265, 184,
	0, 0, 0, 0, 342, 0, 0, 0, 126, 0,
	341, 0, 0, 0, 155, 0, 0, 0, 224, 385,
	158, 0, 0, 232, 172, 0, 0, 0, 0, 0,
	376, 377, 0, 0, 0, 0, 0, 0, 0, 0,
	59, 0, 0, 94, 95, 96, 363, 962, 365, 366,
	367, 368, 0, 0, 116, 364, 369, 370, 371, 0,
	0, 0, 0, 339, 356, 0, 384, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 353, 354, 426, 0,
	0, 0, 399, 0, 355, 0, 0, 348, 349, 351,
	350, 352, 357, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 135, 398, 0, 0, 293, 0, 0, 396,
	0, 203, 0, 236, 139, 154, 112, 151, 98, 108,
	0, 137, 181, 211, 215, 0, 0, 0, 120, 0,
	213, 191, 253, 0, 193, 212, 159, 242, 204, 252,
	262, 263, 239, 260, 271, 229, 101, 238, 250, 117,
	223, 0, 0, 0, 103, 248, 235, 170, 148, 149,
	102, 0, 209, 125, 133, 122, 183, 245, 246, 121,
	274, 109, 259, 105, 110, 258, 177, 241, 249, 171,
	164, 104, 247, 169, 163, 153, 129, 141, 201, 161,
	202, 142, 174, 173, 175, 0, 0, 0, 233, 256,
	275, 114, 0, 240, 267, 270, 0, 205, 115, 134,
	128, 200, 132, 156, 266, 268, 269, 176, 111, 144,
	230, 152, 160, 208, 273, 190, 214, 118, 255, 231,
	386, 397, 392, 393, 390, 391, 389, 388, 387, 400,
	378, 379, 380, 381, 383, 0, 394, 395, 382, 97,
	106, 157, 272, 206, 131, 257, 0, 0, 124, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 100, 107, 113, 119, 123, 127, 130, 136,
	140, 143, 145, 146, 147, 150, 162, 165, 166, 167,
	168, 178, 179, 180, 182, 185, 186, 187, 188, 189,
	192, 194, 195, 196, 197, 198, 199, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 225, 226, 227, 228,
	234, 237, 243, 244, 254, 261, 264, 138, 251, 265,
	184, 0, 0, 0, 0, 342, 0, 0, 0, 126,
	0, 341, 0, 0, 0, 155, 0, 0, 0, 224,
	385, 158, 0, 0, 232, 172, 0, 0, 0, 0,
	0, 376, 377, 0, 0, 0, 0, 0, 0, 0,
	0, 59, 0, 0, 94, 95, 96, 363, 959, 365,
	366, 367, 368, 0, 0, 116, 364, 369, 370, 371,
	0, 0, 0, 0, 339, 356, 0, 384, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 353, 354, 426,
	0, 0, 0, 399, 0, 355, 0, 0, 348, 349,
	351, 350, 352, 357, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 135, 398, 0, 0, 293, 0, 0,
	396, 0, 203, 0, 236, 139, 154, 112, 151, 98,
	108, 0, 137, 181, 211, 215, 0, 0, 0, 120,
	0, 213, 191, 253, 0, 193, 212, 159, 242, 204,
	252, 262, 263, 239, 260, 271, 229, 101, 238, 250,
	117, 223, 0, 0, 0, 103, 248, 235, 170, 148,
	149, 102, 0, 209, 125, 133, 122, 183, 245, 246,
	121, 274, 109, 259, 105, 110, 258, 177, 241, 249,
	171, 164, 104, 247, 169, 163, 153, 129, 141, 201,
	161, 202, 142, 174, 173, 175, 0, 0, 0, 233,
	256, 275, 114, 0, 240, 267, 270, 0, 205, 115,
	134, 128, 200, 132, 156, 266, 268, 269, 176, 111,
	144, 230, 152, 160, 208, 273, 190, 214, 118, 255,
	231, 386, 397, 392, 393, 390, 391, 389, 388, 387,
	400, 378, 379, 380, 381, 383, 0, 394, 395, 382,
	97, 106, 157, 272, 206, 131, 257, 0, 0, 124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 100, 107, 113, 119, 123, 127, 130,
	136, 140, 143, 145, 146, 147, 150, 162, 165, 166,
	167, 168, 178, 179, 180, 182, 185, 186, 187, 188,
	189, 192, 194, 195, 196, 197, 198, 199, 207, 210,
	216, 217, 218, 219, 220, 221, 222, 225, 226, 227,
	228, 234, 237, 243, 244, 254, 261, 264, 138, 251,
	265, 406, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 184, 0, 0, 0, 0, 342,
	0, 0, 0, 126, 0, 341, 0, 0, 0, 155,
	0, 0, 0, 224, 385, 158, 0, 0, 232, 172,
	0, 0, 0, 0, 0, 376, 377, 0, 0, 0,
	0, 0, 0, 0, 0, 59, 0, 0, 94, 95,
	96, 363, 362, 365, 366, 367, 368, 0, 0, 116,
	364, 369, 370, 371, 0, 0, 0, 0, 339, 356,
	0, 384, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 353, 354, 0, 0, 0, 0, 399, 0, 355,
	0, 0, 348, 349, 351, 350, 352, 357, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 135, 398, 0,
	0, 293, 0, 0, 396, 0, 203, 0, 236, 139,
	154, 112, 151, 98, 108, 0, 137, 181, 211, 215,
	0, 0, 0, 120, 0, 213, 191, 253, 0, 193,
	212, 159, 242, 204, 252, 262, 263, 239, 260, 271,
	229, 101, 238, 250, 117, 223, 0, 0, 0, 103,
	248, 235, 170, 148, 149, 102, 0, 209, 125, 133,
	122, 183, 245, 246, 121, 274, 109, 259, 105, 110,
	258, 177, 241, 249, 171, 164, 104, 247, 169, 163,
	153, 129, 141, 201, 161, 202, 142, 174, 173, 175,
	0, 0, 0, 233, 256, 275, 114, 0, 240, 267,
	270, 0, 205, 115, 134, 128, 200, 132, 156, 266,
	268, 269, 176, 111, 144, 230, 152, 160, 208, 273,
	190, 214, 118, 255, 231, 386, 397, 392, 393, 390,
	391, 389, 388, 387, 400, 378, 379, 380, 381, 383,
	0, 394, 395, 382, 97, 106, 157, 272, 206, 131,
	257, 0, 0, 124, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 100, 107, 113,
	119, 123, 127, 130, 136, 140, 143, 145, 146, 147,
	150, 162, 165, 166, 167, 168, 178, 179, 180, 182,
	185, 186, 187, 188, 189, 192, 194, 195, 196, 197,
	198, 199, 207, 210, 216, 217, 218, 219, 220, 221,
	222, 225, 226, 227, 228, 234, 237, 243, 244, 254,
	261, 264, 138, 251, 265, 184, 0, 0, 0, 0,
	342, 0, 0, 0, 126, 0, 341, 0, 0, 0,
	155, 0, 0, 0, 224, 385, 158, 0, 0, 232,
	172, 0, 0, 0, 0, 0, 376, 377, 0, 0,
	0, 0, 0, 0, 0, 0, 59, 0, 0, 94,
	95, 96, 363, 362, 365, 366, 367, 368, 0, 0,
	116, 364, 369, 370, 371, 0, 0, 0, 0, 339,
	356, 0, 384, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 353, 354, 0, 0, 0, 0, 399, 0,
	355, 0, 0, 348, 349, 351, 350, 352, 357, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 135, 398,
	0, 0, 293, 0, 0, 396, 0, 203, 0, 236,
	139, 154, 112, 151, 98, 108, 0, 137, 181, 211,
	215, 0, 0, 0, 120, 0, 213, 191, 253, 0,
	193, 212, 159, 242, 204, 252, 262, 263, 239, 260,
	271, 229, 101, 238, 250, 117, 223, 0, 0, 0,
	103, 248, 235, 170, 148, 149, 102, 0, 209, 125,
	133, 122, 183, 245, 246, 121, 274, 109, 259, 105,
	110, 258, 177, 241, 249, 171, 164, 104, 247, 169,
	163, 153, 129, 141, 201, 161, 202, 142, 174, 173,
	175, 0, 0, 0, 233, 256, 275, 114, 0, 240,
	267, 270, 0, 205, 115, 134, 128, 200, 132, 156,
	266, 268, 269, 176, 111, 144, 230, 152, 160, 208,
	273, 190, 214, 118, 255, 231, 386, 397, 392, 393,
	390, 391, 389, 388, 387, 400, 378, 379, 380, 381,
	383, 0, 394, 395, 382, 97, 106, 157, 272, 206,
	131, 257, 0, 0, 124, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 100, 107,
	113, 119, 123, 127, 130, 136, 140, 143, 145, 146,
	147, 150, 162, 165, 166, 167, 168, 178, 179, 180,
	182, 185, 186, 187, 188, 189, 192, 194, 195, 196,
	197, 198, 199, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 225, 226, 227, 228, 234, 237, 243, 244,
	254, 261, 264, 138, 251, 265, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 0, 0, 0,
	0, 155, 0, 0, 0, 224, 385, 158, 0, 0,
	232, 172, 0, 0, 0, 0, 0, 376, 377, 0,
	0, 0, 0, 0, 0, 0, 0, 59, 0, 0,
	94, 95, 96, 363, 362, 365, 366, 367, 368, 0,
	0, 116, 364, 369, 370, 371, 0, 0, 0, 0,
	0, 356, 0, 384, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 353, 354, 0, 0, 0, 0, 399,
	0, 355, 0, 0, 348, 349, 351, 350, 352, 357,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 135,
	398, 0, 0, 293, 0, 0, 396, 0, 203, 0,
	236, 139, 154, 112, 151, 98, 108, 0, 137, 181,
	211, 215, 0, 0, 0, 120, 0, 213, 191, 253,
	1631, 193, 212, 159, 242, 204, 252, 262, 263, 239,
	260, 271, 229, 101, 238, 250, 117, 223, 0, 0,
	0, 103, 248, 235, 170, 148, 149, 102, 0, 209,
	125, 133, 122, 183, 245, 246, 121, 274, 109, 259,
	105, 110, 258, 177, 241, 249, 171, 164, 104, 247,
	169, 163, 153, 129, 141, 201, 161, 202, 142, 174,
	173, 175, 0, 0, 0, 233, 256, 275, 114, 0,
	240, 267, 270, 0, 205, 115, 134, 128, 200, 132,
	156, 266, 268, 269, 176, 111, 144, 230, 152, 160,
	208, 273, 190, 214, 118, 255, 231, 386, 397, 392,
	393, 390, 391, 389, 388, 387, 400, 378, 379, 380,
	381, 383, 0, 394, 395, 382, 97, 106, 157, 272,
	206, 131, 257, 0, 0, 124, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 100,
	107, 113, 119, 123, 127, 130, 136, 140, 143, 145,
	146, 147, 150, 162, 165, 166, 167, 168, 178, 179,
	180, 182, 185, 186, 187, 188, 189, 192, 194, 195,
	196, 197, 198, 199, 207, 210, 216, 217, 218, 219,
	220, 221, 222, 225, 226, 227, 228, 234, 237, 243,
	244, 254, 261, 264, 138, 251, 265, 184, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 0, 0, 0,
	0, 0, 155, 0, 0, 0, 224, 385, 158, 0,
	0, 232, 172, 0, 0, 0, 0, 0, 376, 377,
	0, 0, 0, 0, 0, 0, 0, 0, 59, 0,
	413, 94, 95, 96, 363, 362, 365, 366, 367, 368,
	0, 0, 116, 364, 369, 370, 371, 0, 0, 0,
	0, 0, 356, 0, 384, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 353, 354, 0, 0, 0, 0,
	399, 0, 355, 0, 0, 348, 349, 351, 350, 352,
	357, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	135, 398, 0, 0, 293, 0, 0, 396, 0, 203,
	0, 236, 139, 154, 112, 151, 98, 108, 0, 137,
	181, 211, 215, 0, 0, 0, 120, 0, 213, 191,
	253, 0, 193, 212, 159, 242, 204, 252, 262, 263,
	239, 260, 271, 229, 101, 238, 250, 117, 223, 0,
	0, 0, 103, 248, 235, 170, 148, 149, 102, 0,
	209, 125, 133, 122, 183, 245, 246, 121, 274, 109,
	259, 105, 110, 258, 177, 241, 249, 171, 164, 104,
	247, 169, 163, 153, 129, 141, 201, 161, 202, 142,
	174, 173, 175, 0, 0, 0, 233, 256, 275, 114,
	0, 240, 267, 270, 0, 205, 115, 134, 128, 200,
	132, 156, 266, 268, 269, 176, 111, 144, 230, 152,
	160, 208, 273, 190, 214, 118, 255, 231, 386, 397,
	392, 393, 390, 391, 389, 388, 387, 400, 378, 379,
	380, 381, 383, 0, 394, 395, 382, 97, 106, 157,
	272, 206, 131, 257, 0, 0, 124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	100, 107, 113, 119, 123, 127, 130, 136, 140, 143,
	145, 146, 147, 150, 162, 165, 166, 167, 168, 178,
	179, 180, 182, 185, 186, 187, 188, 189, 192, 194,
	195, 196, 197, 198, 199, 207, 210, 216, 217, 218,
	219, 220, 221, 222, 225, 226, 227, 228, 234, 237,
	243, 244, 254, 261, 264, 138, 251, 265, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 0,
	0, 0, 0, 155, 0, 0, 0, 224, 385, 158,
	0, 0, 232, 172, 0, 0, 0, 0, 0, 376,
	377, 0, 0, 0, 0, 0, 0, 0, 0, 59,
	0, 0, 94, 95, 96, 363, 362, 365, 366, 367,
	368, 0, 0, 116, 364, 369, 370, 371, 0, 0,
	0, 0, 0, 356, 0, 384, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 353, 354, 0, 0, 0,
	0, 399, 0, 355, 0, 0, 348, 349, 351, 350,
	352, 357, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 135, 398, 0, 0, 293, 0, 0, 396, 0,
	203, 0, 236, 139, 154, 112, 151, 98, 108, 0,
	137, 181, 211, 215, 0, 0, 0, 120, 0, 213,
	191, 253, 0, 193, 212, 159, 242, 204, 252, 262,
	263, 239, 260, 271, 229, 101, 238, 250, 117, 223,
	0, 0, 0, 103, 248, 235, 170, 148, 149, 102,
	0, 209, 125, 133, 122, 183, 245, 246, 121, 274,
	109, 259, 105, 110, 258, 177, 241, 249, 171, 164,
	104, 247, 169, 163, 153, 129, 141, 201, 161, 202,
	142, 174, 173, 175, 0, 0, 0, 233, 256, 275,
	114, 0, 240, 267, 270, 0, 205, 115, 134, 128,
	200, 132, 156, 266, 268, 269, 176, 111, 144, 230,
	152, 160, 208, 273, 190, 214, 118, 255, 231, 386,
	397, 392, 393, 390, 391, 389, 388, 387, 400, 378,
	379, 380, 381, 383, 0, 394, 395, 382, 97, 106,
	157, 272, 206, 131, 257, 0, 0, 124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 100, 107, 113, 119, 123, 127, 130, 136, 140,
	143, 145, 146, 147, 150, 162, 165, 166, 167, 168,
	178, 179, 180, 182, 185, 186, 187, 188, 189, 192,
	194, 195, 196, 197, 198, 199, 207, 210, 216, 217,
	218, 219, 220, 221, 222, 225, 226, 227, 228, 234,
	237, 243, 244, 254, 261, 264, 138, 251, 265, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	0, 0, 0, 0, 155, 0, 0, 0, 224, 0,
	158, 0, 0, 232, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 95, 96, 0, 0, 0, 0,
	0, 0, 0, 0, 116, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 662, 661, 671, 672, 664, 665, 666, 667,
	668, 669, 670, 663, 0, 0, 673, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 135, 0, 0, 0, 293, 0, 0, 0,
	0, 203, 0, 236, 139, 154, 112, 151, 98, 108,
	0, 137, 181, 211, 215, 0, 0, 0, 120, 0,
	213, 191, 253, 0, 193, 212, 159, 242, 204, 252,
	262, 263, 239, 260, 271, 229, 101, 238, 250, 117,
	223, 0, 0, 0, 103, 248, 235, 170, 148, 149,
	102, 0, 209, 125, 133, 122, 183, 245, 246, 121,
	274, 109, 259, 105, 110, 258, 177, 241, 249, 171,
	164, 104, 247, 169, 163, 153, 129, 141, 201, 161,
	202, 142, 174, 173, 175, 0, 0, 0, 233, 256,
	275, 114, 0, 240, 267, 270, 0, 205, 115, 134,
	128, 200, 132, 156, 266, 268, 269, 176, 111, 144,
	230, 152, 160, 208, 273, 190, 214, 118, 255, 231,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	106, 157, 272, 206, 131, 257, 0, 0, 124, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 100, 107, 113, 119, 123, 127, 130, 136,
	140, 143, 145, 146, 147, 150, 162, 165, 166, 167,
	168, 178, 179, 180, 182, 185, 186, 187, 188, 189,
	192, 194, 195, 196, 197, 198, 199, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 225, 226, 227, 228,
	234, 237, 243, 244, 254, 261, 264, 138, 251, 265,
	184, 0, 0, 0, 757, 0, 0, 0, 0, 126,
	0, 0, 0, 0, 0, 155, 0, 0, 0, 224,
	0, 158, 0, 0, 232, 172, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 95, 96, 0, 759, 0,
	0, 0, 0, 0, 0, 116, 0, 0, 0, 0,
	0, 651, 652, 650, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 653,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 135, 0, 0, 0, 293, 0, 0,
	0, 0, 203, 0, 236, 139, 154, 112, 151, 98,
	108, 0, 137, 181, 211, 215, 0, 0, 0, 120,
	0, 213, 191, 253, 0, 193, 212, 159, 242, 204,
	252, 262, 263, 239, 260, 271, 229, 101, 238, 250,
	117, 223, 0, 0, 0, 103, 248, 235, 170, 148,
	149, 102, 0, 209, 125, 133, 122, 183, 245, 246,
	121, 274, 109, 259, 105, 110, 258, 177, 241, 249,
	171, 164, 104, 247, 169, 163, 153, 129, 141, 201,
	161, 202, 142, 174, 173, 175, 0, 0, 0, 233,
	256, 275, 114, 0, 240, 267, 270, 0, 205, 115,
	134, 128, 200, 132, 156, 266, 268, 269, 176, 111,
	144, 230, 152, 160, 208, 273, 190, 214, 118, 255,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 106, 157, 272, 206, 131, 257, 0, 0, 124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 100, 107, 113, 119, 123, 127, 130,
	136, 140, 143, 145, 146, 147, 150, 162, 165, 166,
	167, 168, 178, 179, 180, 182, 185, 186, 187, 188,
	189, 192, 194, 195, 196, 197, 198, 199, 207, 210,
	216, 217, 218, 219, 220, 221, 222, 225, 226, 227,
	228, 234, 237, 243, 244, 254, 261, 264, 138, 251,
	265, 184, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 0, 0, 0, 0, 155, 0, 0, 0,
	224, 0, 158, 0, 0, 232, 172, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 94, 95, 96, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 135, 88, 89, 0, 85, 0,
	0, 0, 90, 203, 0, 236, 139, 154, 112, 151,
	98, 108, 0, 137, 181, 211, 215, 0, 0, 0,
	120, 0, 213, 191, 253, 0, 193, 212, 159, 242,
	204, 252, 262, 263, 239, 260, 271, 229, 101, 238,
	250, 117, 223, 0, 0, 0, 103, 248, 235, 170,
	148, 149, 102, 0, 209, 125, 133, 122, 183, 245,
	246, 121, 274, 109, 259, 105, 110, 258, 177, 241,
	249, 171, 164, 104, 247, 169, 163, 153, 129, 141,
	201, 161, 202, 142, 174, 173, 175, 0, 0, 0,
	233, 256, 275, 114, 0, 240, 267, 270, 0, 205,
	115, 134, 128, 200, 132, 156, 266, 268, 269, 176,
	111, 144, 230, 152, 160, 208, 273, 190, 214, 118,
	255, 231, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 106, 157, 272, 206, 131, 257, 0, 0,
	124, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 100, 107, 113, 119, 123, 127,
	130, 136, 140, 143, 145, 146, 147, 150, 162, 165,
	166, 167, 168, 178, 179, 180, 182, 185, 186, 187,
	188, 189, 192, 194, 195, 196, 197, 198, 199, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 225, 226,
	227, 228, 234, 237, 243, 244, 254, 261, 264, 138,
	251, 265, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 1074, 0, 0, 0, 0, 155, 0, 0,
	0, 224, 0, 158, 0, 0, 232, 172, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 95, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 135, 0, 0, 1073, 293,
	0, 0, 0, 1070, 1068, 0, 1069, 139, 154, 112,
	151, 98, 108, 1066, 1072, 181, 211, 215, 0, 0,
	0, 120, 0, 213, 191, 253, 0, 193, 212, 159,
	242, 204, 252, 262, 263, 239, 260, 271, 229, 101,
	238, 250, 117, 223, 0, 0, 0, 103, 248, 235,
	170, 148, 149, 102, 0, 209, 125, 133, 122, 183,
	245, 246, 121, 274, 109, 259, 105, 110, 258, 177,
	241, 249, 171, 164, 104, 247, 169, 163, 153, 129,
	141, 201, 161, 202, 142, 174, 173, 175, 0, 0,
	0, 233, 256, 275, 114, 0, 240, 267, 270, 0,
	205, 115, 134, 128, 200, 132, 156, 266, 268, 269,
	176, 111, 144, 230, 152, 160, 208, 273, 190, 214,
	118, 255, 231, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 106, 157, 272, 206, 131, 257, 0,
	0, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 100, 107, 113, 119, 123,
	127, 130, 136, 140, 143, 145, 146, 147, 150, 162,
	165, 166, 167, 168, 178, 179, 180, 182, 185, 186,
	187, 188, 189, 192, 194, 195, 196, 197, 198, 199,
	207, 210, 216, 217, 218, 219, 220, 221, 222, 225,
	226, 227, 228, 234, 237, 243, 244, 254, 261, 264,
	138, 251, 265, 184, 0, 0, 0, 1033, 0, 0,
	0, 0, 126, 0, 0, 0, 0, 0, 155, 0,
	0, 0, 224, 0, 158, 0, 0, 232, 172, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 95, 96,
	0, 1035, 0, 0, 0, 0, 0, 0, 116, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 135, 0, 0, 0,
	293, 0, 0, 0, 0, 203, 0, 236, 139, 154,
	112, 151, 98, 108, 0, 137, 181, 211, 215, 0,
	0, 0, 120, 0, 213, 191, 253, 0, 193, 212,
	159, 242, 204, 252, 262, 263, 239, 260, 271, 229,
	101, 238, 250, 117, 223, 0, 0, 0, 103, 248,
	235, 170, 148, 149, 102, 0, 209, 125, 133, 122,
	183, 245, 246, 121, 274, 109, 259, 105, 110, 258,
	177, 241, 249, 171, 164, 104, 247, 169, 163, 153,
	129, 141, 201, 161, 202, 142, 174, 173, 175, 0,
	0, 0, 233, 256, 275, 114, 0, 240, 267, 270,
	0, 205, 115, 134, 128, 200, 132, 156, 266, 268,
	269, 176, 111, 144, 230, 152, 160, 208, 273, 190,
	214, 118, 255, 231, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 106, 157, 272, 206, 131, 257,
	0, 0, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 100, 107, 113, 119,
	123, 127, 130, 136, 140, 143, 145, 146, 147, 150,
	162, 165, 166, 167, 168, 178, 179, 180, 182, 185,
	186, 187, 188, 189, 192, 194, 195, 196, 197, 198,
	199, 207, 210, 216, 217, 218, 219, 220, 221, 222,
	225, 226, 227, 228, 234, 237, 243, 244, 254, 261,
	264, 138, 251, 265, 30, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 184, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 0, 0, 0,
	0, 0, 155, 0, 0, 0, 224, 0, 158, 0,
	0, 232, 172, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 59, 0,
	0, 94, 95, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 116, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	135, 0, 0, 0, 293, 0, 0, 0, 0, 203,
	0, 236, 139, 154, 112, 151, 98, 108, 0, 137,
	181, 211, 215, 0, 0, 0, 120, 0, 213, 191,
	253, 0, 193, 212, 159, 242, 204, 252, 262, 263,
	239, 260, 271, 229, 101, 238, 250, 117, 223, 0,
	0, 0, 103, 248, 235, 170, 148, 149, 102, 0,
	209, 125, 133, 122, 183, 245, 246, 121, 274, 109,
	259, 105, 110, 258, 177, 241, 249, 171, 164, 104,
	247, 169, 163, 153, 129, 141, 201, 161, 202, 142,
	174, 173, 175, 0, 0, 0, 233, 256, 275, 114,
	0, 240, 267, 270, 0, 205, 115, 134, 128, 200,
	132, 156, 266, 268, 269, 176, 111, 144, 230, 152,
	160, 208, 273, 190, 214, 118, 255, 231, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 106, 157,
	272, 206, 131, 257, 0, 0, 124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	100, 107, 113, 119, 123, 127, 130, 136, 140, 143,
	145, 146, 147, 150, 162, 165, 166, 167, 168, 178,
	179, 180, 182, 185, 186, 187, 188, 189, 192, 194,
	195, 196, 197, 198, 199, 207, 210, 216, 217, 218,
	219, 220, 221, 222, 225, 226, 227, 228, 234, 237,
	243, 244, 254, 261, 264, 138, 251, 265, 184, 0,
	0, 0, 1033, 0, 0, 0, 0, 126, 0, 0,
	0, 0, 0, 155, 0, 0, 0, 224, 0, 158,
	0, 0, 232, 172, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 95, 96, 0, 1035, 0, 0, 0,
	0, 0, 0, 116, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 135, 0, 0, 0, 293, 0, 0, 0, 0,
	203, 0, 236, 139, 154, 112, 151, 98, 108, 0,
	137, 181, 211, 215, 0, 0, 0, 120, 0, 213,
	191, 253, 0, 1031, 212, 159, 242, 204, 252, 262,
	263, 239, 260, 271, 229, 101, 238, 250, 117, 223,
	0, 0, 0, 103, 248, 235, 170, 148, 149, 102,
	0, 209, 125, 133, 122, 183, 245, 246, 121, 274,
	109, 259, 105, 110, 258, 177, 241, 249, 171, 164,
	104, 247, 169, 163, 153, 129, 141, 201, 161, 202,
	142, 174, 173, 175, 0, 0, 0, 233, 256, 275,
	114, 0, 240, 267, 270, 0, 205, 115, 134, 128,
	200, 132, 156, 266, 268, 269, 176, 111, 144, 230,
	152, 160, 208, 273, 190, 214, 118, 255, 231, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 106,
	157, 272, 206, 131, 257, 0, 0, 124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 100, 107, 113, 119, 123, 127, 130, 136, 140,
	143, 145, 146, 147, 150, 162, 165, 166, 167, 168,
	178, 179, 180, 182, 185, 186, 187, 188, 189, 192,
	194, 195, 196, 197, 198, 199, 207, 210, 216, 217,
	218, 219, 220, 221, 222, 225, 226, 227, 228, 234,
	237, 243, 244, 254, 261, 264, 138, 251, 265, 184,
	0, 0, 0, 0, 0, 0, 0, 0, 126, 0,
	0, 0, 0, 0, 155, 0, 0, 0, 224, 0,
	158, 0, 0, 232, 172, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 94, 95, 96, 0, 0, 998, 0,
	0, 999, 0, 0, 116, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 135, 0, 0, 0, 293, 0, 0, 0,
	0, 203, 0, 236, 139, 154, 112, 151, 98, 108,
	0, 137, 181, 211, 215, 0, 0, 0, 120, 0,
	213, 191, 253, 0, 193, 212, 159, 242, 204, 252,
	262, 263, 239, 260, 271, 229, 101, 238, 250, 117,
	223, 0, 0, 0, 103, 248, 235, 170, 148, 149,
	102, 0, 209, 125, 133, 122, 183, 245, 246, 121,
	274, 109, 259, 105, 110, 258, 177, 241, 249, 171,
	164, 104, 247, 169, 163, 153, 129, 141, 201, 161,
	202, 142, 174, 173, 175, 0, 0, 0, 233, 256,
	275, 114, 0, 240, 267, 270, 0, 205, 115, 134,
	128, 200, 132, 156, 266, 268, 269, 176, 111, 144,
	230, 152, 160, 208, 273, 190, 214, 118, 255, 231,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	106, 157, 272, 206, 131, 257, 0, 0, 124, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 100, 107, 113, 119, 123, 127, 130, 136,
	140, 143, 145, 146, 147, 150, 162, 165, 166, 167,
	168, 178, 179, 180, 182, 185, 186, 187, 188, 189,
	192, 194, 195, 196, 197, 198, 199, 207, 210, 216,
	217, 218, 219, 220, 221, 222, 225, 226, 227, 228,
	234, 237, 243, 244, 254, 261, 264, 138, 251, 265,
	184, 0, 0, 0, 0, 0, 0, 0, 0, 126,
	0, 791, 0, 0, 0, 155, 0, 0, 0, 224,
	0, 158, 0, 0, 232, 172, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 95, 96, 0, 790, 0,
	0, 0, 0, 0, 0, 116, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 135, 0, 0, 0, 293, 0, 0,
	0, 0, 203, 0, 236, 139, 154, 112, 151, 98,
	108, 0, 137, 181, 211, 215, 0, 0, 0, 120,
	0, 213, 191, 253, 0, 193, 212, 159, 242, 204,
	252, 262, 263, 239, 260, 271, 229, 101, 238, 250,
	117, 223, 0, 0, 0, 103, 248, 235, 170, 148,
	149, 102, 0, 209, 125, 133, 122, 183, 245, 246,
	121, 274, 109, 259, 105, 110, 258, 177, 241, 249,
	171, 164, 104, 247, 169, 163, 153, 129, 141, 201,
	161, 202, 142, 174, 173, 175, 0, 0, 0, 233,
	256, 275, 114, 0, 240, 267, 270, 0, 205, 115,
	134, 128, 200, 132, 156, 266, 268, 269, 176, 111,
	144, 230, 152, 160, 208, 273, 190, 214, 118, 255,
	231, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 106, 157, 272, 206, 131, 257, 0, 0, 124,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 100, 107, 113, 119, 123, 127, 130,
	136, 140, 143, 145, 146, 147, 150, 162, 165, 166,
	167, 168, 178, 179, 180, 182, 185, 186, 187, 188,
	189, 192, 194, 195, 196, 197, 198, 199, 207, 210,
	216, 217, 218, 219, 220, 221, 222, 225, 226, 227,
	228, 234, 237, 243, 244, 254, 261, 264, 138, 251,
	265, 184, 0, 0, 0, 0, 0, 0, 0, 0,
	126, 0, 0, 0, 0, 0, 155, 0, 0, 0,
	224, 0, 158, 0, 0, 232, 172, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 413, 94, 95, 96, 0, 0,
	0, 0, 0, 0, 0, 0, 116, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 135, 0, 0, 0, 293, 0,
	0, 0, 0, 203, 0, 236, 139, 154, 112, 151,
	98, 108, 0, 137, 181, 211, 215, 0, 0, 0,
	120, 0, 213, 191, 253, 0, 193, 212, 159, 242,
	204, 252, 262, 263, 239, 260, 271, 229, 101, 238,
	250, 117, 223, 0, 0, 0, 103, 248, 235, 170,
	148, 149, 102, 0, 209, 125, 133, 122, 183, 245,
	246, 121, 274, 109, 259, 105, 110, 258, 177, 241,
	249, 171, 164, 104, 247, 169, 163, 153, 129, 141,
	201, 161, 202, 142, 174, 173, 175, 0, 0, 0,
	233, 256, 275, 114, 0, 240, 267, 270, 0, 205,
	115, 134, 128, 200, 132, 156, 266, 268, 269, 176,
	111, 144, 230, 152, 160, 208, 273, 190, 214, 118,
	255, 231, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 106, 157, 272, 206, 131, 257, 0, 0,
	124, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 100, 107, 113, 119, 123, 127,
	130, 136, 140, 143, 145, 146, 147, 150, 162, 165,
	166, 167, 168, 178, 179, 180, 182, 185, 186, 187,
	188, 189, 192, 194, 195, 196, 197, 198, 199, 207,
	210, 216, 217, 218, 219, 220, 221, 222, 225, 226,
	227, 228, 234, 237, 243, 244, 254, 261, 264, 138,
	251, 265, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 0, 0, 0, 0, 0, 155, 0, 0,
	0, 224, 0, 158, 0, 0, 232, 172, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 59, 0, 0, 94, 95, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 135, 0, 0, 0, 293,
	0, 0, 0, 0, 203, 0, 236, 139, 154, 112,
	151, 98, 108, 0, 137, 181, 211, 215, 0, 0,
	0, 120, 0, 213, 191, 253, 0, 193, 212, 159,
	242, 204, 252, 262, 263, 239, 260, 271, 229, 101,
	238, 250, 117, 223, 0, 0, 0, 103, 248, 235,
	170, 148, 149, 102, 0, 209, 125, 133, 122, 183,
	245, 246, 121, 274, 109, 259, 105, 110, 258, 177,
	241, 249, 171, 164, 104, 247, 169, 163, 153, 129,
	141, 201, 161, 202, 142, 174, 173, 175, 0, 0,
	0, 233, 256, 275, 114, 0, 240, 267, 270, 0,
	205, 115, 134, 128, 200, 132, 156, 266, 268, 269,
	176, 111, 144, 230, 152, 160, 208, 273, 190, 214,
	118, 255, 231, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 106, 157, 272, 206, 131, 257, 0,
	0, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 100, 107, 113, 119, 123,
	127, 130, 136, 140, 143, 145, 146, 147, 150, 162,
	165, 166, 167, 168, 178, 179, 180, 182, 185, 186,
	187, 188, 189, 192, 194, 195, 196, 197, 198, 199,
	207, 210, 216, 217, 218, 219, 220, 221, 222, 225,
	226, 227, 228, 234, 237, 243, 244, 254, 261, 264,
	138, 251, 265, 184, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 0, 0, 0, 0, 0, 155, 0,
	0, 0, 224, 0, 158, 0, 0, 232, 172, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 95, 96,
	0, 1035, 0, 0, 0, 0, 0, 0, 116, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 135, 0, 0, 0,
	293, 0, 0, 0, 0, 203, 0, 236, 139, 154,
	112, 151, 98, 108, 0, 137, 181, 211, 215, 0,
	0, 0, 120, 0, 213, 191, 253, 0, 193, 212,
	159, 242, 204, 252, 262, 263, 239, 260, 271, 229,
	101, 238, 250, 117, 223, 0, 0, 0, 103, 248,
	235, 170, 148, 149, 102, 0, 209, 125, 133, 122,
	183, 245, 246, 121, 274, 109, 259, 105, 110, 258,
	177, 241, 249, 171, 164, 104, 247, 169, 163, 153,
	129, 141, 201, 161, 202, 142, 174, 173, 175, 0,
	0, 0, 233, 256, 275, 114, 0, 240, 267, 270,
	0, 205, 115, 134, 128, 200, 132, 156, 266, 268,
	269, 176, 111, 144, 230, 152, 160, 208, 273, 190,
	214, 118, 255, 231, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 106, 157, 272, 206, 131, 257,
	0, 0, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 100, 107, 113, 119,
	123, 127, 130, 136, 140, 143, 145, 146, 147, 150,
	162, 165, 166, 167, 168, 178, 179, 180, 182, 185,
	186, 187, 188, 189, 192, 194, 195, 196, 197, 198,
	199, 207, 210, 216, 217, 218, 219, 220, 221, 222,
	225, 226, 227, 228, 234, 237, 243, 244, 254, 261,
	264, 138, 251, 265, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 0, 0, 0, 0, 155,
	0, 0, 0, 224, 0, 158, 0, 0, 232, 172,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 95,
	96, 0, 759, 0, 0, 0, 0, 0, 0, 116,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 135, 0, 0,
	0, 293, 0, 0, 0, 0, 203, 0, 236, 139,
	154, 112, 151, 98, 108, 0, 137, 181, 211, 215,
	0, 0, 0, 120, 0, 213, 191, 253, 0, 193,
	212, 159, 242, 204, 252, 262, 263, 239, 260, 271,
	229, 101, 238, 250, 117, 223, 0, 0, 0, 103,
	248, 235, 170, 148, 149, 102, 0, 209, 125, 133,
	122, 183, 245, 246, 121, 274, 109, 259, 105, 110,
	258, 177, 241, 249, 171, 164, 104, 247, 169, 163,
	153, 129, 141, 201, 161, 202, 142, 174, 173, 175,
	0, 0, 0, 233, 256, 275, 114, 0, 240, 267,
	270, 0, 205, 115, 134, 128, 200, 132, 156, 266,
	268, 269, 176, 111, 144, 230, 152, 160, 208, 273,
	190, 214, 118, 255, 231, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 106, 157, 272, 206, 131,
	257, 0, 0, 124, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 100, 107, 113,
	119, 123, 127, 130, 136, 140, 143, 145, 146, 147,
	150, 162, 165, 166, 167, 168, 178, 179, 180, 182,
	185, 186, 187, 188, 189, 192, 194, 195, 196, 197,
	198, 199, 207, 210, 216, 217, 218, 219, 220, 221,
	222, 225, 226, 227, 228, 234, 237, 243, 244, 254,
	261, 264, 138, 251, 265, 773, 0, 0, 0, 0,
	0, 0, 184, 0, 0, 0, 0, 0, 0, 0,
	0, 126, 0, 0, 0, 0, 0, 155, 0, 0,
	0, 224, 0, 158, 0, 0, 232, 172, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 94, 95, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 116, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 135, 0, 0, 0, 293,
	0, 0, 0, 0, 203, 0, 236, 139, 154, 112,
	151, 98, 108, 0, 137, 181, 211, 215, 0, 0,
	0, 120, 0, 213, 191, 253, 0, 193, 212, 159,
	242, 204, 252, 262, 263, 239, 260, 271, 229, 101,
	238, 250, 117, 223, 0, 0, 0, 103, 248, 235,
	170, 148, 149, 102, 0, 209, 125, 133, 122, 183,
	245, 246, 121, 274, 109, 259, 105, 110, 258, 177,
	241, 249, 171, 164, 104, 247, 169, 163, 153, 129,
	141, 201, 161, 202, 142, 174, 173, 175, 0, 0,
	0, 233, 256, 275, 114, 0, 240, 267, 270, 0,
	205, 115, 134, 128, 200, 132, 156, 266, 268, 269,
	176, 111, 144, 230, 152, 160, 208, 273, 190, 214,
	118, 255, 231, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 106, 157, 272, 206, 131, 257, 0,
	0, 124, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 100, 107, 113, 119, 123,
	127, 130, 136, 140, 143, 145, 146, 147, 150, 162,
	165, 166, 167, 168, 178, 179, 180, 182, 185, 186,
	187, 188, 189, 192, 194, 195, 196, 197, 198, 199,
	207, 210, 216, 217, 218, 219, 220, 221, 222, 225,
	226, 227, 228, 234, 237, 243, 244, 254, 261, 264,
	138, 251, 265, 184, 0, 0, 0, 0, 0, 0,
	0, 763, 126, 0, 0, 0, 0, 0, 155, 0,
	0, 0, 224, 0, 158, 0, 0, 232, 172, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 94, 95, 96,
	0, 0, 0, 0, 0, 0, 0, 0, 116, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 135, 0, 0, 0,
	293, 0, 0, 0, 0, 203, 0, 236, 139, 154,
	112, 151, 98, 108, 0, 137, 181, 211, 215, 0,
	0, 0, 120, 0, 213, 191, 253, 0, 193, 212,
	159, 242, 204, 252, 262, 263, 239, 260, 271, 229,
	101, 238, 250, 117, 223, 0, 0, 0, 103, 248,
	235, 170, 148, 149, 102, 0, 209, 125, 133, 122,
	183, 245, 246, 121, 274, 109, 259, 105, 110, 258,
	177, 241, 249, 171, 164, 104, 247, 169, 163, 153,
	129, 141, 201, 161, 202, 142, 174, 173, 175, 0,
	0, 0, 233, 256, 275, 114, 0, 240, 267, 270,
	0, 205, 115, 134, 128, 200, 132, 156, 266, 268,
	269, 176, 111, 144, 230, 152, 160, 208, 273, 190,
	214, 118, 255, 231, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 106, 157, 272, 206, 131, 257,
	0, 0, 124, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 100, 107, 113, 119,
	123, 127, 130, 136, 140, 143, 145, 146, 147, 150,
	162, 165, 166, 167, 168, 178, 179, 180, 182, 185,
	186, 187, 188, 189, 192, 194, 195, 196, 197, 198,
	199, 207, 210, 216, 217, 218, 219, 220, 221, 222,
	225, 226, 227, 228, 234, 237, 243, 244, 254, 261,
	264, 138, 251, 265, 184, 0, 0, 0, 0, 0,
	0, 0, 0, 126, 0, 0, 0, 0, 0, 155,
	0, 0, 0, 224, 0, 158, 0, 0, 232, 172,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 94, 95,
	96, 0, 640, 0, 0, 0, 0, 0, 0, 116,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 135, 0, 0,
	0, 293, 0, 0, 0, 0, 203, 0, 236, 139,
	154, 112, 151, 98, 108, 0, 137, 181, 211, 215,
	0, 0, 0, 120, 0, 213, 191, 253, 0, 193,
	212, 159, 242, 204, 252, 262, 263, 239, 260, 271,
	229, 101, 238, 250, 117, 223, 0, 0, 0, 103,
	248, 235, 170, 148, 149, 102, 0, 209, 125, 133,
	122, 183, 245, 246, 121, 274, 109, 259, 105, 110,
	258, 177, 241, 249, 171, 164, 104, 247, 169, 163,
	153, 129, 141, 201, 161, 202, 142, 174, 173, 175,
	0, 0, 0, 233, 256, 275, 114, 0, 240, 267,
	270, 0, 205, 115, 134, 128, 200, 132, 156, 266,
	268, 269, 176, 111, 144, 230, 152, 160, 208, 273,
	190, 214, 118, 255, 231, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 106, 157, 272, 206, 131,
	257, 0, 0, 124, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 100, 107, 113,
	119, 123, 127, 130, 136, 140, 143, 145, 146, 147,
	150, 162, 165, 166, 167, 168, 178, 179, 180, 182,
	185, 186, 187, 188, 189, 192, 194, 195, 196, 197,
	198, 199, 207, 210, 216, 217, 218, 219, 220, 221,
	222, 225, 226, 227, 228, 234, 237, 243, 244, 254,
	261, 264, 138, 251, 265, 184, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 0, 0, 0, 0, 0,
	155, 0, 0, 0, 224, 0, 158, 0, 0, 232,
	172, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 94,
	95, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	116, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 568, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 135, 0,
	0, 0, 293, 0, 0, 0, 0, 203, 0, 236,
	139, 154, 112, 151, 98, 108, 0, 137, 181, 211,
	215, 0, 0, 0, 120, 0, 213, 191, 253, 0,
	193, 212, 159, 242, 204, 252, 262, 263, 239, 260,
	271, 229, 101, 238, 250, 117, 223, 0, 0, 0,
	103, 248, 235, 170, 148, 149, 102, 0, 209, 125,
	133, 122, 183, 245, 246, 121, 274, 109, 259, 105,
	110, 258, 177, 241, 249, 171, 164, 104, 247, 169,
	163, 153, 129, 141, 201, 161, 202, 142, 174, 173,
	175, 0, 0, 0, 233, 256, 275, 114, 0, 240,
	267, 270, 0, 205, 115, 134, 128, 200, 132, 156,
	266, 268, 269, 176, 111, 144, 230, 152, 160, 208,
	273, 190, 214, 118, 255, 231, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 106, 157, 272, 206,
	131, 257, 0, 0, 124, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 100, 107,
	113, 119, 123, 127, 130, 136, 140, 143, 145, 146,
	147, 150, 162, 165, 166, 167, 168, 178, 179, 180,
	182, 185, 186, 187, 188, 189, 192, 194, 195, 196,
	197, 198, 199, 207, 210, 216, 217, 218, 219, 220,
	221, 222, 225, 226, 227, 228, 234, 237, 243, 244,
	254, 261, 264, 138, 251, 265, 184, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 0, 0, 0, 0,
	0, 155, 0, 0, 0, 224, 0, 158, 0, 0,
	232, 172, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	94, 95, 96, 0, 0, 0, 0, 0, 0, 0,
	0, 116, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 330, 0, 135,
	0, 0, 0, 293, 0, 0, 0, 0, 203, 0,
	236, 139, 154, 112, 151, 98, 108, 0, 137, 181,
	211, 215, 0, 0, 0, 120, 0, 213, 191, 253,
	0, 193, 212, 159, 242, 204, 252, 262, 263, 239,
	260, 271, 229, 101, 238, 250, 117, 223, 0, 0,
	0, 103, 248, 235, 170, 148, 149, 102, 0, 209,
	125, 133, 122, 183, 245, 246, 121, 274, 109, 259,
	105, 110, 258, 177, 241, 249, 171, 164, 104, 247,
	169, 163, 153, 129, 141, 201, 161, 202, 142, 174,
	173, 175, 0, 0, 0, 233, 256, 275, 114, 0,
	240, 267, 270, 0, 205, 115, 134, 128, 200, 132,
	156, 266, 268, 269, 176, 111, 144, 230, 152, 160,
	208, 273, 190, 214, 118, 255, 231, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 106, 157, 272,
	206, 131, 257, 0, 0, 124, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 100,
	107, 113, 119, 123, 127, 130, 136, 140, 143, 145,
	146, 147, 150, 162, 165, 166, 167, 168, 178, 179,
	180, 182, 185, 186, 187, 188, 189, 192, 194, 195,
	196, 197, 198, 199, 207, 210, 216, 217, 218, 219,
	220, 221, 222, 225, 226, 227, 228, 234, 237, 243,
	244, 254, 261, 264, 329, 251, 265, 184, 0, 0,
	0, 0, 0, 0, 0, 0, 126, 0, 0, 0,
	0, 0, 155, 0, 0, 0, 224, 0, 158, 0,
	0, 232, 172, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 94, 95, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 116, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	135, 0, 288, 0, 293, 0, 0, 0, 0, 203,
	0, 236, 139, 154, 112, 151, 98, 108, 0, 137,
	181, 211, 215, 0, 0, 0, 120, 0, 213, 191,
	253, 0, 193, 212, 159, 242, 204, 252, 262, 263,
	239, 260, 271, 229, 101, 238, 250, 117, 223, 0,
	0, 0, 103, 248, 235, 170, 148, 149, 102, 0,
	209, 125, 133, 122, 183, 245, 246, 121, 274, 109,
	259, 105, 110, 258, 177, 241, 249, 171, 164, 104,
	247, 169, 163, 153, 129, 141, 201, 161, 202, 142,
	174, 173, 175, 0, 0, 0, 233, 256, 275, 114,
	0, 240, 267, 270, 0, 205, 115, 134, 128, 200,
	132, 156, 266, 268, 269, 176, 111, 144, 230, 152,
	160, 208, 273, 190, 214, 118, 255, 231, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 106, 157,
	272, 206, 131, 257, 0, 0, 124, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	100, 107, 113, 119, 123, 127, 130, 136, 140, 143,
	145, 146, 147, 150, 162, 165, 166, 167, 168, 178,
	179, 180, 182, 185, 186, 187, 188, 189, 192, 194,
	195, 196, 197, 198, 199, 207, 210, 216, 217, 218,
	219, 220, 221, 222, 225, 226, 227, 228, 234, 237,
	243, 244, 254, 261, 264, 138, 251, 265, 184, 0,
	0, 0, 0, 0, 0, 0, 0, 126, 0, 0,
	0, 0, 0, 155, 0, 0, 0, 224, 0, 158,
	0, 0, 232, 172, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 94, 95, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 116, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 135, 0, 0, 0, 293, 0, 0, 0, 0,
	203, 0, 236, 139, 154, 112, 151, 98, 108, 0,
	137, 181, 211, 215, 0, 0, 0, 120, 0, 213,
	191, 253, 0, 193, 212, 159, 242, 204, 252, 262,
	263, 239, 260, 271, 229, 101, 238, 250, 117, 223,
	0, 0, 0, 103, 248, 235, 170, 148, 149, 102,
	0, 209, 125, 133, 122, 183, 245, 246, 121, 274,
	109, 259, 105, 110, 258, 177, 241, 249, 171, 164,
	104, 247, 169, 163, 153, 129, 141, 201, 161, 202,
	142, 174, 173, 175, 0, 0, 0, 233, 256, 275,
	114, 0, 240, 267, 270, 0, 205, 115, 134, 128,
	200, 132, 156, 266, 268, 269, 176, 111, 144, 230,
	152, 160, 208, 273, 190, 214, 118, 255, 231, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 106,
	157, 272, 206, 131, 257, 0, 0, 124, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 100, 107, 113, 119, 123, 127, 130, 136, 140,
	143, 145, 146, 147, 150, 162, 165, 166, 167, 168,
	178, 179, 180, 182, 185, 186, 187, 188, 189, 192,
	194, 195, 196, 197, 198, 199, 207, 210, 216, 217,
	218, 219, 220, 221, 222, 225, 226, 227, 228, 234,
	237, 243, 244, 254, 261, 264, 138, 251, 265,
}
var yyPact = [...]int{

	1636, -1000, -277, 1024, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 992, 773,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 276, 12312, -26,
	137, -4, 17948, 132, 2297, 18299, -1000, 24, -1000, -8,
	18299, 20, 17597, -1000, -1000, -73, -79, -1000, 10206, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 745, 949, 967,
	989, 620, 1133, -1000, 8789, 8789, 104, 104, 104, 7385,
	-1000, -1000, 17246, 18299, 129, 18299, -154, 110, 110, 110,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 131, 18299, 438, 438,
	240, 517, 18299, 99, 438, 99, 99, 99, 18299, -1000,
	188, -1000, -1000, -1000, 18299, 438, 875, 340, 71, 227,
	227, 227, -1000, 195, -1000, 4830, 38, 4830, -42, 1011,
	30, -20, -1000, 340, 4830, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 116, -1000, -1000, 18299, 16895, 146, 287,
	-1000, -1000, -1000, -1000, -1000, -1000, 606, 237, -1000, 10206,
	1736, 598, 598, -1000, -1000, 168, -1000, -1000, 11259, 11259,
	11259, 11259, 11259, 11259, 11259, 11259, 11259, 11259, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 598, 187, -1000, 9855, 598, 598, 598, 598,
	598, 598, 598, 598, 10206, 598, 598, 598, 598, 598,
	598, 598, 598, 598, 598, 598, 598, 598, 598, 598,
	598, -1000, -1000, 992, -1000, 773, -1000, -1000, -1000, 990,
	10206, 10206, 992, -1000, 842, 8789, -1000, -1000, 1052, -1000,
	-1000, -1000, -1000, 347, 731, -1000, -1000, 11961, 182, 1023,
	16544, -1000, 15133, 16193, 716, 7020, -135, -1000, -1000, -1000,
	285, 14431, -1000, -1000, -1000, 869, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 671, 18299, -1000,
	323, -1000, 438, 4830, 118, 438, 310, 438, 18299, 18299,
	4830, 4830, 4830, 45, 80, 70, 18299, 508, 715, 115,
	18299, 941, 779, 18299, 438, 438, -1000, 6290, -1000, 4830,
	340, -1000, 505, 10206, 4830, 4830, 4830, 18299, 4830, 4830,
	-1000, 504, -1000, -1000, 346, -1000, -1000, -1000, -1000, -1000,
	-1000, 4830, 4830, -1000, 1020, 322, -1000, -1000, -1000, -1000,
	10206, 227, -1000, 778, -1000, -1000, 13, -1000, -1000, -1000,
	-1000, -1000, 1024, -1000, -1000, -1000, -122, -1000, -1000, 10206,
	10206, 10206, 10206, 537, 248, 11259, 416, 256, 11259, 11259,
	11259, 11259, 11259, 11259, 11259, 11259, 11259, 11259, 11259, 11259,
	11259, 11259, 11259, 601, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 438, -1000, 1049, 584, 584, 175, 175, 175,
	175, 175, 175, 175, 175, 175, 11610, 7736, 6290, 620,
	657, 992, 8789, 8789, 10206, 10206, 9491, 9140, 8789, 874,
	294, 237, 18299, -1000, -1000, 10908, -1000, -1000, -1000, -1000,
	-1000, 524, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 18299,
	18299, 8789, 8789, 8789, 8789, 8789, 967, 620, 1052, 923,
	1044, 213, 558, 714, -1000, 337, 967, 14080, 723, 1052,
	-1000, -1000, -1000, 18299, 8789, -1000, -1000, 15835, -1000, -1000,
	5925, 18299, 55, 18299, -1000, 738, 998, -1000, -1000, -1000,
	946, 13378, 13729, 18299, 732, 729, -1000, -1000, 179, 6655,
	-135, -1000, 6655, 695, -1000, -109, -117, 8087, 153, -1000,
	-1000, -1000, -1000, 4465, 12663, 575, 362, -66, -1000, -1000,
	-1000, 742, -1000, 742, 742, 742, 742, -33, -33, -33,
	-33, -1000, -1000, -1000, -1000, -1000, 760, 758, -1000, 742,
	742, 742, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	756, 756, 756, 746, 746, 755, -1000, 18299, 4830, 927,
	4830, -1000, 103, -1000, -1000, -1000, 18299, 18299, 18299, 18299,
	18299, 156, -1000, 18299, 18299, 710, -1000, 18299, 4830, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 237, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 18299, -1000, -1000, -1000, -1000,
	18299, 340, 18299, 18299, 237, -1000, 18299, 18299, -1000, -1000,
	-1000, -1000, -1000, 237, 248, 298, 368, -1000, -1000, 422,
	-1000, -1000, 1862, -1000, -1000, -1000, -1000, 416, 11259, 11259,
	11259, 452, 1862, 1669, 597, 851, 175, 361, 361, 200,
	200, 200, 200, 200, 520, 520, -1000, -1000, -1000, 524,
	-1000, -1000, -1000, 524, 8789, 8789, 702, 598, 178, -1000,
	745, -1000, -1000, 967, 631, 631, 468, 329, 270, 1019,
	631, 261, 1013, 631, 631, 8789, -1000, -1000, 300, -1000,
	10206, 524, -1000, 177, -1000, 822, 700, 699, 631, 524,
	524, 631, 631, 990, -1000, -1000, 855, -1000, 832, 10206,
	10206, 10206, -1000, -1000, -1000, 990, 991, -1000, 849, 848,
	1000, 15133, 1052, -1000, -1000, -1000, -1000, 174, 1000, 706,
	598, -1000, 18299, 15133, 15133, 15133, 15133, 15133, -1000, 818,
	815, -1000, 794, 790, 831, 18299, -1000, 633, 620, 13378,
	171, 598, -1000, 15484, -1000, -1000, 55, 688, 15133, 18299,
	-1000, -1000, 15133, 18299, 5560, -1000, 695, -135, -83, -1000,
	-1000, -1000, -1000, 237, -1000, 608, 692, 4100, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 750, 438, -1000, 914, 226,
	196, 438, 908, -1000, -1000, -1000, 878, -1000, 326, -69,
	-1000, -1000, 384, -33, -33, -1000, -1000, 153, 858, 153,
	153, 153, 503, 503, -1000, -1000, -1000, -1000, 383, -1000,
	-1000, -1000, 381, -1000, 777, 18299, 4830, -1000, -1000, -1000,
	-1000, 257, 257, 214, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 54, 726, -1000, -1000, -1000,
	-1000, -6, 42, 114, -1000, 4830, -1000, 322, 322, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 452, 1862,
	871, -1000, 11259, 11259, -1000, -1000, 631, 631, 8789, 6290,
	992, 990, -1000, -1000, 75, 601, 75, 11259, 11259, -1000,
	11259, 11259, -1000, -166, 709, 277, -1000, 10206, 324, -1000,
	6290, -1000, 11259, 11259, -1000, -1000, -1000, -1000, -1000, -1000,
	852, 836, 237, 237, -1000, -1000, 18299, -1000, -1000, -1000,
	-1000, 993, 10206, 691, -1000, 5195, 967, 772, 18299, 598,
	1024, 13378, 18299, 725, -1000, 283, 998, 754, 770, 1098,
	-1000, -1000, -1000, -1000, 807, -1000, 783, -1000, -1000, -1000,
	-1000, -1000, 620, -1000, 128, 127, 123, 18299, -1000, 1000,
	15133, 698, -1000, 698, -1000, 165, -1000, -1000, -1000, -125,
	-137, -1000, -1000, -1000, 4465, -1000, 4465, 18299, 72, -1000,
	438, 438, -1000, -1000, -1000, 747, 769, 11259, -1000, -1000,
	-1000, 550, 153, 153, -1000, 260, -1000, -1000, -1000, 628,
	-1000, 626, 673, 624, 18299, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 18299, -1000, -1000, -1000, -1000, -1000,
	18299, -173, 438, 18299, 18299, 18299, 18299, -1000, 340, 340,
	-1000, 11259, 1862, 1862, -1000, -1000, 524, -1000, 967, -1000,
	524, 742, 742, -1000, 742, 746, -1000, 742, -15, 742,
	-17, 524, 524, 1628, 1574, 1420, 1219, 598, -161, -1000,
	237, 10206, -1000, 888, 352, 486, -1000, -1000, 997, 988,
	237, -1000, -1000, -1000, 916, 560, 580, -1000, -1000, 8438,
	619, 154, 617, -1000, 992, 18299, 10206, -1000, -1000, 10206,
	744, -1000, 10206, -1000, -1000, -1000, 992, 598, 598, 598,
	617, 992, 698, -1000, -1000, 186, -1000, -1000, -1000, 4100,
	-1000, 615, -1000, 742, -1000, 908, -1000, -1000, 18299, -61,
	1041, 1862, -1000, -1000, -1000, -1000, -1000, -33, 485, -33,
	378, -1000, 375, 4830, -1000, -1000, -1000, -1000, 920, -1000,
	6290, -1000, -1000, 741, 730, -1000, -1000, -1000, -1000, 1862,
	-1000, 990, -1000, -1000, 135, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 11259, 11259, 11259, 11259, 11259, 967, 437,
	237, 11259, 11259, -1000, -1000, 10206, 10206, 893, -1000, 598,
	-1000, 690, 18299, 18299, -1000, 18299, 967, -1000, 237, 237,
	18299, 237, 14782, 18299, 18299, 13014, 967, -1000, 167, 18299,
	-1000, 600, -1000, 207, -1000, -118, 153, -1000, 153, 542,
	528, -1000, 598, 609, -1000, 281, 18299, 18299, -1000, -1000,
	-1000, 822, 822, 822, 822, 77, 524, -1000, 822, 822,
	237, 606, 1032, -1000, 598, 1024, 152, -1000, -1000, -1000,
	586, 582, -1000, 582, 582, 171, -1000, 167, -1000, 438,
	278, 411, -1000, 68, 18299, 367, 892, -1000, 882, -1000,
	-1000, -1000, -1000, -1000, 53, 6290, 4465, 555, -1000, -1000,
	-1000, -1000, -1000, 524, 57, -178, -1000, -1000, -1000, 18299,
	580, 18299, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 358,
	-1000, -1000, 18299, -1000, -1000, 408, -1000, -1000, 540, -1000,
	18299, -1000, -1000, 726, -1000, 826, -170, -181, 538, -1000,
	-1000, 736, -1000, -1000, 53, 846, -173, -1000, 823, -1000,
	18299, -1000, 50, -1000, -176, 527, 41, -179, 764, 598,
	-185, 763, -1000, 1017, 10557, -1000, -1000, 1027, 191, 191,
	822, 524, -1000, -1000, -1000, 76, 521, -1000, -1000, -1000,
	-1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1310, 1309, 31, 72, 68, 1308, 1307, 1306, 1304,
	101, 100, 95, 1301, 1300, 1299, 1297, 1296, 1295, 1291,
	1288, 1286, 1281, 1279, 1278, 1277, 1270, 1267, 1266, 1265,
	1264, 1263, 1260, 90, 1259, 1254, 1251, 1250, 87, 1249,
	1248, 1247, 1246, 1245, 50, 169, 48, 77, 1244, 65,
	1746, 1242, 34, 66, 63, 1240, 36, 1236, 1235, 78,
	1234, 1233, 62, 1232, 1231, 55, 1230, 58, 1229, 13,
	29, 1227, 1226, 1222, 1221, 81, 1917, 1220, 1217, 14,
	1214, 1211, 91, 1209, 70, 33, 9, 27, 24, 1208,
	71, 1204, 7, 1203, 64, 1202, 1200, 1196, 1195, 40,
	1194, 67, 1193, 18, 1192, 25, 1189, 8, 59, 42,
	22, 10, 1188, 1186, 21, 82, 61, 73, 1185, 1181,
	1176, 514, 1175, 1174, 52, 1173, 1172, 1170, 56, 89,
	96, 416, 1168, 1165, 1163, 1161, 1159, 47, 856, 1496,
	17, 76, 1158, 1154, 1144, 2592, 37, 60, 15, 1142,
	1140, 1138, 30, 117, 44, 487, 1137, 38, 1133, 1132,
	1131, 1130, 1129, 1126, 1125, 19, 1124, 1123, 1122, 35,
	20, 75, 26, 1121, 1118, 1117, 1116, 49, 79, 1105,
	1104, 57, 1103, 1100, 41, 1093, 1091, 1090, 1089, 1086,
	28, 11, 1085, 16, 1084, 12, 1082, 23, 1076, 4,
	1070, 6, 1066, 5, 0, 1065, 3, 54, 1, 1064,
	2, 1063, 1062, 1060, 1607, 1342, 74, 1057, 102,
}
var yyR1 = [...]int{

	0, 212, 213, 213, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	204, 204, 204, 21, 3, 3, 3, 3, 2, 2,
	8, 9, 4, 5, 5, 10, 10, 37, 37, 11,
	12, 12, 12, 12, 216, 216, 59, 59, 60, 60,
	108, 108, 13, 14, 14, 117, 117, 116, 116, 116,
	118, 118, 118, 118, 155, 155, 15, 15, 15, 15,
	15, 15, 15, 206, 206, 205, 203, 203, 202, 202,
	201, 22, 186, 188, 188, 187, 187, 187, 187, 178,
	158, 158, 158, 158, 161, 161, 159, 159, 159, 159,
	159, 159, 159, 159, 159, 160, 160, 160, 160, 160,
	162, 162, 162, 162, 162, 163, 163, 163, 163, 163,
	163, 163, 163, 163, 163, 163, 163, 163, 163, 163,
	164, 164, 164, 164, 164, 164, 164, 164, 177, 177,
	165, 165, 171, 171, 172, 172, 172, 174, 174, 175,
	175, 132, 132, 132, 167, 167, 168, 168, 173, 173,
	169, 169, 169, 170, 170, 170, 176, 176, 176, 176,
	176, 166, 166, 179, 179, 196, 196, 195, 195, 195,
	185, 185, 192, 192, 192, 192, 192, 182, 182, 182,
	183, 183, 181, 181, 184, 184, 194, 194, 193, 180,
	180, 197, 197, 197, 197, 209, 210, 208, 208, 208,
	208, 208, 189, 189, 189, 190, 190, 190, 191, 191,
	191, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 207, 207,
	207, 207, 207, 207, 207, 207, 207, 207, 207, 207,
	207, 207, 200, 198, 198, 199, 199, 17, 23, 23,
	18, 18, 18, 18, 18, 19, 19, 24, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 125, 125,
	211, 211, 127, 127, 123, 123, 126, 126, 124, 124,
	124, 128, 128, 128, 129, 129, 156, 156, 156, 26,
	26, 28, 28, 29, 30, 30, 150, 150, 151, 151,
	31, 32, 36, 36, 36, 36, 36, 36, 39, 39,
	39, 7, 7, 7, 7, 35, 35, 35, 6, 6,
	27, 27, 27, 27, 20, 217, 33, 34, 34, 38,
	38, 38, 40, 40, 40, 43, 43, 43, 46, 46,
	48, 48, 48, 48, 48, 49, 49, 49, 49, 49,
	49, 45, 45, 47, 47, 47, 47, 142, 142, 142,
	141, 141, 51, 51, 52, 52, 53, 53, 54, 54,
	54, 91, 68, 68, 107, 107, 109, 109, 55, 55,
	55, 55, 56, 56, 57, 57, 58, 58, 149, 149,
	148, 148, 148, 147, 147, 61, 61, 61, 63, 62,
	62, 62, 62, 64, 64, 66, 66, 65, 65, 67,
	69, 69, 69, 69, 69, 70, 70, 50, 50, 50,
	50, 50, 50, 50, 50, 120, 120, 72, 72, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 83,
	83, 83, 83, 83, 83, 73, 73, 73, 73, 73,
	73, 73, 44, 44, 84, 84, 84, 90, 85, 85,
	76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
	76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
	76, 76, 76, 76, 76, 76, 76, 76, 76, 76,
	76, 76, 76, 76, 80, 80, 80, 80, 78, 78,
	78, 78, 78, 78, 78, 78, 78, 78, 78, 78,
	78, 79, 79, 79, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 218, 218, 82,
	81, 81, 81, 81, 81, 81, 81, 42, 42, 42,
	42, 42, 154, 154, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 157, 157, 157, 95, 95, 41,
	41, 93, 93, 94, 96, 96, 92, 92, 92, 75,
	75, 75, 75, 75, 75, 75, 75, 77, 77, 77,
	97, 97, 98, 98, 99, 99, 100, 100, 101, 102,
	102, 102, 103, 103, 103, 103, 105, 105, 105, 104,
	104, 74, 74, 74, 74, 106, 106, 106, 106, 110,
	110, 86, 86, 88, 88, 87, 89, 111, 111, 114,
	112, 112, 115, 115, 115, 115, 115, 113, 113, 113,
	144, 144, 144, 119, 119, 130, 130, 131, 131, 121,
	121, 133, 133, 133, 133, 133, 133, 133, 133, 133,
	133, 122, 122, 122, 134, 134, 134, 135, 135, 136,
	136, 136, 143, 143, 139, 139, 140, 140, 145, 145,
	146, 146, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 138, 138, 138, 138, 138, 138, 138, 138,
	138, 138, 214, 215, 152, 153, 153, 153,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
	1, 1, 1, 2, 5, 6, 6, 7, 4, 6,
	5, 7, 8, 1, 3, 7, 8, 1, 1, 9,
	9, 8, 7, 7, 1, 1, 1, 3, 1, 3,
	0, 4, 3, 5, 4, 1, 3, 3, 2, 2,
	2, 2, 2, 1, 1, 1, 2, 2, 8, 4,
	6, 5, 5, 0, 2, 1, 0, 2, 1, 3,
	3, 4, 4, 2, 4, 1, 3, 3, 3, 8,
	3, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
	1, 2, 2, 2, 1, 4, 4, 2, 2, 3,
	3, 3, 3, 1, 1, 1, 1, 1, 6, 6,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	0, 3, 0, 5, 0, 3, 5, 0, 1, 0,
	1, 0, 1, 2, 0, 2, 0, 3, 0, 1,
	0, 3, 3, 0, 2, 2, 0, 2, 1, 2,
	1, 0, 2, 5, 4, 1, 2, 2, 3, 2,
	0, 1, 2, 3, 3, 2, 2, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 3, 2, 3,
	1, 10, 11, 11, 12, 3, 3, 1, 1, 2,
	2, 2, 0, 1, 3, 1, 2, 3, 1, 1,
	1, 6, 7, 7, 7, 7, 4, 5, 4, 4,
	7, 5, 5, 5, 12, 7, 5, 9, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 7, 1, 3, 8, 8, 3, 3, 5,
	4, 6, 5, 4, 4, 3, 2, 3, 4, 4,
	3, 4, 4, 4, 4, 4, 4, 3, 3, 3,
	2, 7, 2, 3, 4, 3, 7, 5, 4, 2,
	4, 4, 3, 3, 5, 2, 3, 3, 1, 1,
	1, 1, 0, 1, 0, 1, 1, 1, 0, 2,
	2, 0, 2, 2, 0, 2, 0, 1, 1, 2,
	1, 1, 2, 1, 1, 5, 0, 1, 0, 1,
	2, 3, 0, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 3, 3,
	2, 2, 3, 3, 2, 0, 2, 0, 2, 1,
	2, 2, 0, 1, 1, 0, 1, 1, 0, 1,
	0, 1, 2, 3, 4, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 2, 3, 5, 0, 1, 2,
	1, 1, 0, 2, 1, 3, 1, 1, 1, 3,
	3, 3, 3, 7, 1, 3, 1, 3, 4, 4,
	4, 3, 2, 4, 0, 1, 0, 2, 0, 1,
	0, 1, 2, 1, 1, 1, 2, 2, 1, 2,
	3, 2, 3, 2, 2, 2, 1, 1, 3, 3,
	0, 5, 4, 5, 5, 0, 2, 1, 3, 3,
	3, 2, 3, 1, 2, 0, 3, 1, 1, 3,
	3, 4, 4, 5, 3, 4, 5, 6, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 0, 2, 1, 1, 1, 3, 1, 3,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 3,
	1, 1, 1, 1, 4, 5, 5, 6, 4, 4,
	6, 6, 6, 8, 8, 8, 8, 9, 8, 5,
	4, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 8, 8, 0, 2, 3,
	4, 4, 4, 4, 4, 4, 4, 0, 3, 4,
	7, 3, 1, 1, 2, 3, 3, 1, 2, 2,
	1, 2, 1, 2, 2, 1, 2, 0, 1, 0,
	2, 1, 2, 4, 0, 2, 1, 3, 5, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	0, 3, 0, 2, 0, 3, 1, 3, 2, 0,
	1, 1, 0, 2, 4, 4, 0, 2, 4, 0,
	4, 2, 1, 5, 4, 1, 3, 3, 5, 0,
	5, 1, 3, 1, 2, 3, 1, 1, 3, 3,
	1, 3, 3, 3, 3, 3, 2, 1, 2, 1,
	1, 1, 1, 1, 1, 0, 2, 0, 3, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 2, 3, 0, 1, 1, 1, 1, 0,
	1, 1, 0, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -212, -1, -3, -8, -9, -10, -11, -12, -13,
	-14, -15, -16, -17, -18, -19, -24, -25, -26, -28,
	-29, -30, -31, -32, -6, -27, -20, -21, -4, -214,
	6, 7, 8, -37, 10, 11, 31, -22, 126, 127,
	129, 128, 162, 130, 155, 56, 176, 177, 179, 180,
	181, 182, -39, 160, 161, 32, 33, 132, 35, 60,
	9, 269, 157, 156, 26, -213, 371, -38, 5, -99,
	16, -3, -33, -217, -33, -33, -33, -33, -33, -33,
	-186, -188, 60, 99, -136, 136, 80, 261, 133, 134,
	140, -139, -204, -138, 63, 64, 65, 279, 148, 311,
	312, 176, 190, 184, 211, 203, 280, 313, 149, 201,
	204, 248, 146, 314, 231, 238, 74, 179, 257, 315,
	158, 199, 195, 316, 288, 193, 28, 317, 240, 216,
	318, 284, 242, 194, 239, 132, 319, 151, 367, 144,
	320, 217, 221, 321, 249, 322, 323, 324, 188, 189,
	325, 147, 251, 215, 145, 34, 243, 281, 40, 166,
	252, 219, 326, 214, 210, 327, 328, 329, 330, 213,
	187, 209, 44, 223, 222, 224, 247, 206, 331, 332,
	333, 152, 334, 196, 19, 335, 336, 337, 338, 339,
	255, 161, 340, 164, 341, 342, 343, 344, 345, 346,
	241, 218, 220, 141, 168, 237, 283, 347, 253, 192,
	348, 153, 165, 160, 256, 154, 349, 350, 351, 352,
	353, 354, 355, 180, 38, 356, 357, 358, 359, 175,
	250, 259, 43, 228, 360, 186, 143, 361, 177, 172,
	233, 207, 167, 362, 363, 197, 198, 212, 185, 208,
	178, 368, 169, 162, 364, 258, 229, 285, 205, 202,
	173, 365, 170, 171, 366, 369, 244, 234, 245, 246,
	235, 174, 282, 254, 200, 230, -122, 136, 261, 133,
	235, 282, 134, 134, 135, 136, 261, 133, 134, -65,
	-145, -204, -138, 136, 134, 117, 204, 248, 126, 232,
	243, 244, 240, -127, 241, 168, -156, 134, -123, 231,
	234, 235, 174, -211, -204, 242, 250, 249, 236, 246,
	245, -145, 178, -150, 183, -139, 181, -65, -36, 367,
	130, -152, -152, 233, 233, -152, -85, -50, -71, 83,
	-76, 30, 24, -75, -72, -92, -89, -90, 117, 118,
	120, 119, 121, 106, 107, 114, 84, 122, -80, -78,
	-79, -81, 67, 66, 75, 68, 69, 70, 71, 76,
	77, 78, -139, -145, -87, -214, 50, 51, 270, 271,
	272, 273, 278, 274, 86, 39, 260, 268, 267, 266,
	264, 265, 262, 263, 276, 277, 139, 261, 133, 112,
	269, -204, -138, -5, -4, -214, 6, 21, 22, -103,
	18, 17, -215, 62, -40, -48, 45, 46, -49, 22,
	36, 49, 47, -34, -45, -47, 108, -50, -145, -47,
	-121, 138, -121, -121, -112, -155, 178, -115, 250, 249,
	-140, -113, -139, -137, 248, 204, 247, 131, 286, 82,
	23, 25, 226, 85, 117, 17, 86, 116, 270, 126,
	54, 287, 262, 263, 260, 272, 273, 261, 232, 30,
	11, 289, 26, 156, 22, 36, 110, 128, 89, 90,
	159, 24, 157, 78, 292, 20, 57, 12, 14, 293,
	294, 15, 139, 138, 101, 135, 52, 9, 122, 27,
	98, 48, 295, 29, 296, 297, 298, 299, 50, 99,
	18, 264, 265, 32, 300, 278, 163, 112, 55, 41,
	83, 301, 302, 76, 303, 79, 58, 80, 16, 53,
	37, 304, 305, 306, 307, 100, 129, 269, 51, 308,
	133, 6, 275, 31, 155, 49, 309, 134, 88, 276,
	277, 137, 77, 5, 140, 33, 10, 56, 59, 266,
	267, 268, 39, 87, 13, 310, 81, -187, 99, -178,
	-139, -65, 135, -65, 269, -131, 139, -131, -131, 134,
	-65, -204, -204, 126, 128, 131, 58, 67, -23, -65,
	-130, 139, -204, -130, -130, -130, -65, 123, -65, -204,
	31, -128, 99, 13, 261, -204, 168, 134, 169, 136,
	-129, 99, -129, -129, -182, 135, 34, 147, -153, -214,
	-140, 172, 173, -153, -126, -125, 238, 239, 233, 237,
	13, 173, 233, 171, -128, -153, 137, -139, -35, -139,
	67, -7, -3, -11, -10, -12, 91, -152, -152, 61,
	82, 80, 81, 98, -50, -73, 101, 83, 99, 100,
	85, 103, 102, 113, 106, 107, 108, 109, 110, 111,
	112, 104, 105, 116, 91, 92, 93, 94, 95, 96,
	97, -120, -214, -90, -214, 124, 125, -76, -76, -76,
	-76, -76, -76, -76, -76, -76, -76, -214, 123, -2,
	-85, -4, -214, -214, -214, -214, -214, -214, -214, -214,
	-95, -50, -214, -218, -82, -214, -218, -82, -218, -82,
	-218, -214, -218, -82, -218, -82, -218, -218, -82, -214,
	-214, -214, -214, -214, -214, -214, -99, -3, -33, -105,
	20, 32, -50, -100, -101, -50, -99, 41, -45, -49,
	45, 46, 73, 12, 61, -142, -141, 23, -139, 67,
	123, 12, -66, 27, -65, -52, -53, -54, -55, -68,
	-91, -214, -65, 12, -59, -60, -65, -67, -145, 61,
	178, -115, -155, -117, -116, 251, 253, 91, -144, -139,
	67, 30, 31, 62, 61, -65, -158, -161, -163, -162,
	-164, -159, -160, 201, 202, 117, 205, 207, 208, 209,
	210, 211, 212, 213, 214, 215, 216, 31, 158, 197,
	198, 199, 200, 217, 218, 219, 220, 221, 222, 223,
	224, 184, 203, 280, 185, 186, 187, 188, 189, 190,
	192, 193, 194, 195, 196, -204, -153, 136, -204, 83,
	-204, -65, -65, -153, -153, -153, 170, 170, 134, 134,
	175, -65, 67, 61, 137, -59, 24, 58, -65, -204,
	-204, -146, -145, -137, -153, -128, 67, -50, -153, -153,
	-153, -65, -153, -153, 67, -183, 12, 101, -153, -153,
	12, -124, 12, 101, -50, -129, 58, -151, 181, 215,
	368, 369, 370, -50, -50, -50, -50, -83, 76, 83,
	77, 78, -76, -84, -87, -90, 72, 101, 99, 100,
	85, -76, -76, -76, -76, -76, -76, -76, -76, -76,
	-76, -76, -76, -76, -76, -76, -154, -204, 67, -204,
	-75, -75, -139, -46, 22, 36, -45, -140, -146, -137,
	-38, -215, -215, -99, -45, -45, -50, -50, -92, 67,
	-45, -92, 67, -45, -45, -43, 22, 36, -93, -94,
	87, -92, -139, -145, -215, -76, -139, -139, -45, -46,
	-46, -45, -45, -103, -215, -104, 27, 10, 101, 61,
	19, 61, -102, 25, 26, -103, -77, -139, 68, 71,
	-51, 12, -49, -65, -47, -141, 108, -146, -65, -108,
	164, -65, 31, 61, -61, -63, -62, -64, 48, 52,
	54, 49, 50, 51, 55, -149, 23, -52, -3, -214,
	-148, 164, -147, 23, -145, 67, -65, -59, -216, 61,
	12, 59, -216, 61, 123, -115, -117, 61, 252, 254,
	255, 58, 79, -50, -170, 116, -189, -190, -191, -140,
	67, 68, -178, -179, -180, -192, 150, -197, 141, 143,
	140, -181, 151, 135, 29, 62, -132, 76, 83, -174,
	229, -165, 60, -165, -165, -165, -165, -169, 204, -169,
	-169, -169, 60, 60, -165, -165, -165, -171, 60, -171,
	-171, -172, 60, -172, -143, 59, -65, -153, 24, -153,
	-133, 131, 128, 129, -200, 127, 226, 204, 74, 30,
	16, 270, 164, 285, -204, 165, -65, -65, -65, -65,
	-65, 131, 128, -65, -65, -65, -153, -65, -65, -128,
	-145, -145, -65, -139, 76, 77, 78, -84, -76, -76,
	-76, -44, 159, 82, -215, -215, -45, -45, -214, 123,
	-5, -103, -215, -215, 61, 59, 23, 12, 12, -215,
	12, 12, -215, -215, -45, -96, -94, 89, -50, -215,
	123, -215, 61, 61, -215, -215, -215, -215, -215, -105,
	37, 43, -50, -50, -101, -105, -119, 20, 12, 39,
	39, -70, 13, -52, -49, 123, -70, -74, 31, 39,
	-3, -214, -214, -111, -114, -92, -53, -54, -54, -53,
	-54, 48, 48, 48, 53, 48, 53, 48, -62, -145,
	-215, -215, -3, -69, 56, 138, 57, -214, -147, -108,
	59, -52, -65, -52, -67, -145, 108, -116, -118, 256,
	253, 259, -204, 67, 61, -191, 91, 60, -204, 29,
	-181, -181, -184, -204, -184, 29, -167, 30, 76, -175,
	230, 68, -169, -169, -170, 31, -170, -170, -170, -177,
	67, -177, 68, 68, 58, -139, -153, -152, -207, 146,
	142, 150, 151, 144, 63, 64, 65, 135, 29, 141,
	143, 164, 140, -207, -134, -135, 137, 23, 135, 29,
	164, -206, 59, 170, 226, 170, 137, -153, -124, -124,
	-44, 82, -76, -76, -215, -215, -46, -140, -99, -105,
	-157, 117, 201, 158, 199, 195, 215, 206, 228, 197,
	229, -154, -157, -76, -76, -76, -76, 279, -99, 90,
	-50, 88, -140, -76, -76, 38, 44, -65, -97, 14,
	-50, 108, -103, -110, 58, -111, -86, -88, -87, -214,
	-106, -139, -109, -139, -70, 61, 91, -57, -56, 58,
	59, -58, 58, -56, 48, 48, -215, 135, 135, 135,
	-109, -70, -52, -70, -70, 123, 253, 257, 258, -190,
	-191, -194, -193, -139, -197, 151, -184, -184, 60, -168,
	58, -76, 62, -170, -170, -204, 117, 62, 61, 62,
	61, 62, 61, -65, -152, -152, -65, -152, -139, -203,
	282, -205, -204, -139, -139, -139, -65, -128, -128, -76,
	-215, -103, -215, -165, -165, -165, -172, -165, 189, -165,
	189, -215, -215, 20, 20, 20, 20, -214, -41, 275,
	-50, 61, 61, 67, -98, 15, 17, 28, -110, 61,
	-215, -215, 61, 123, -215, 61, -99, -114, -50, -50,
	60, -50, -214, -214, -214, -215, -99, -70, 62, 61,
	-165, -107, -139, -173, 226, 10, -169, 67, -169, 68,
	68, -153, 27, -202, -201, -140, 60, 59, -105, -169,
	-204, -76, -76, -76, -76, -76, -103, 67, -76, -76,
	-50, -85, 29, -88, 39, -3, -139, -139, -139, -103,
	-107, -107, -215, -107, -107, -148, -103, -196, -195, 59,
	145, 74, -193, 62, 61, -176, 141, 29, 140, -79,
	-170, -170, 62, 62, -214, 61, 91, -107, -65, -215,
	-215, -215, -215, -42, 101, 282, -215, -215, -215, 10,
	-86, 123, 62, -215, -215, -215, -69, -195, -204, -185,
	91, 67, 153, -139, -166, 74, 29, 29, -198, -199,
	164, -201, -191, 62, -215, 280, 55, 283, -111, -139,
	68, -65, 67, -215, 61, -139, -206, 44, 281, 284,
	60, -199, 39, -203, 44, -107, 166, 282, 62, 167,
	283, -209, -210, 58, -214, 284, -210, 58, 11, 10,
	-76, 163, -208, 154, 149, 152, 31, -208, -215, -215,
	148, 30, 76,
}
var yyDef = [...]int{

	29, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 624, 0,
	365, 365, 365, 365, 365, 365, 365, 0, 699, 691,
	0, 0, 0, 0, -2, 330, 331, 0, 333, -2,
	0, 0, 342, 1014, 1014, 0, 0, 1014, 0, 1012,
	47, 48, 348, 349, 350, 1, 3, 0, 369, 632,
	0, 0, -2, 367, 0, 0, 679, 679, 679, 0,
	76, 77, 0, 0, 0, 997, 0, 677, 677, 677,
	700, 701, 704, 705, 30, 31, 32, 832, 833, 834,
	835, 836, 837, 838, 839, 840, 841, 842, 843, 844,
	845, 846, 847, 848, 849, 850, 851, 852, 853, 854,
	855, 856, 857, 858, 859, 860, 861, 862, 863, 864,
	865, 866, 867, 868, 869, 870, 871, 872, 873, 874,
	875, 876, 877, 878, 879, 880, 881, 882, 883, 884,
	885, 886, 887, 888, 889, 890, 891, 892, 893, 894,
	895, 896, 897, 898, 899, 900, 901, 902, 903, 904,
	905, 906, 907, 908, 909, 910, 911, 912, 913, 914,
	915, 916, 917, 918, 919, 920, 921, 922, 923, 924,
	925, 926, 927, 928, 929, 930, 931, 932, 933, 934,
	935, 936, 937, 938, 939, 940, 941, 942, 943, 944,
	945, 946, 947, 948, 949, 950, 951, 952, 953, 954,
	955, 956, 957, 958, 959, 960, 961, 962, 963, 964,
	965, 966, 967, 968, 969, 970, 971, 972, 973, 974,
	975, 976, 977, 978, 979, 980, 981, 982, 983, 984,
	985, 986, 987, 988, 989, 990, 991, 992, 993, 994,
	995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005,
	1006, 1007, 1008, 1009, 1010, 1011, 0, 0, 0, 0,
	0, 0, 0, 675, 0, 675, 675, 675, 0, 276,
	447, 708, 709, 997, 0, 0, 0, 321, 0, 324,
	324, 324, 290, 0, 292, 1015, 0, 1015, 0, 299,
	0, 0, 305, 321, 1015, 313, 327, 328, 315, 310,
	311, 329, 332, 0, 337, 340, 0, 355, 0, 873,
	347, 360, 361, 1014, 1014, 364, 33, 498, 457, 0,
	463, 465, 0, 500, 501, 502, 503, 504, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 530, 531,
	532, 533, 609, 610, 611, 612, 613, 614, 615, 616,
	467, 468, 606, 0, 656, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 597, 0, 567, 567, 567, 567,
	567, 567, 567, 567, 0, 0, 0, 0, 0, 0,
	0, -2, -2, 624, 43, 0, 365, 370, 371, 636,
	0, 0, 624, 1013, 0, 0, -2, -2, 381, 387,
	388, 389, 390, 366, 0, 391, 393, 397, 0, 0,
	0, 680, 0, 0, 62, 0, 985, 660, -2, -2,
	0, 0, 706, 707, -2, 845, -2, 712, 713, 714,
	715, 716, 717, 718, 719, 720, 721, 722, 723, 724,
	725, 726, 727, 728, 729, 730, 731, 732, 733, 734,
	735, 736, 737, 738, 739, 740, 741, 742, 743, 744,
	745, 746, 747, 748, 749, 750, 751, 752, 753, 754,
	755, 756, 757, 758, 759, 760, 761, 762, 763, 764,
	765, 766, 767, 768, 769, 770, 771, 772, 773, 774,
	775, 776, 777, 778, 779, 780, 781, 782, 783, 784,
	785, 786, 787, 788, 789, 790, 791, 792, 793, 794,
	795, 796, 797, 798, 799, 800, 801, 802, 803, 804,
	805, 806, 807, 808, 809, 810, 811, 812, 813, 814,
	815, 816, 817, 818, 819, 820, 821, 822, 823, 824,
	825, 826, 827, 828, 829, 830, 831, 0, 0, 95,
	0, 93, 0, 1015, 0, 0, 0, 0, 0, 0,
	1015, 1015, 1015, 0, 0, 0, 0, 692, 267, 0,
	0, 0, 0, 0, 0, 0, 275, 0, 277, 1015,
	321, 280, 0, 0, 1015, 1015, 1015, 0, 1015, 1015,
	287, 0, 288, 289, 0, 197, 198, 199, 293, 1016,
	1017, 1015, 1015, 295, 0, 318, 316, 317, 308, 309,
	0, 324, 302, 303, 306, 307, 338, 341, 358, 356,
	357, 359, 351, 352, 353, 354, 0, 362, 363, 0,
	0, 0, 0, 0, 461, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 485, 486, 487, 488, 489, 490,
	491, 464, 0, 478, 0, 0, 0, 520, 521, 522,
	523, 524, 525, 526, 527, 528, 0, 378, 0, 0,
	0, 624, 0, 0, 0, 0, 0, 0, 0, 375,
	0, 598, 0, 551, 559, 0, 552, 560, 553, 561,
	554, 0, 555, 562, 556, 563, 557, 558, 564, 0,
	0, 0, 378, 378, 0, 0, 632, 0, 380, 639,
	0, 0, 633, 625, 626, 629, 632, 0, 402, 382,
	385, 386, 368, 0, 0, 394, 398, 0, 400, 401,
	0, 0, 60, 0, 446, 0, 404, 406, 407, 408,
	428, 0, 430, 0, 0, 0, 56, 58, 447, 0,
	985, 666, 0, 64, 65, 0, 0, 0, 173, 670,
	671, 672, 668, 222, 0, 0, 161, 157, 101, 102,
	103, 150, 105, 150, 150, 150, 150, 170, 170, 170,
	170, 133, 134, 135, 136, 137, 0, 0, 120, 150,
	150, 150, 124, 140, 141, 142, 143, 144, 145, 146,
	147, 106, 107, 108, 109, 110, 111, 112, 113, 114,
	152, 152, 152, 154, 154, 702, 79, 0, 1015, 0,
	1015, 91, 0, 236, 238, 239, 0, 0, 0, 0,
	0, 0, 693, 0, 0, 270, 676, 0, 1015, 273,
	274, 448, 710, 711, 278, 279, 322, 323, 281, 282,
	283, 284, 285, 286, 325, 0, 200, 201, 294, 298,
	0, 321, 0, 0, 300, 301, 0, 0, 339, 343,
	344, 345, 346, 499, 458, 459, 460, 462, 479, 0,
	481, 483, 469, 470, 494, 495, 496, 0, 0, 0,
	0, 492, 474, 0, 505, 506, 507, 508, 509, 510,
	511, 512, 513, 514, 515, 516, 519, 582, 583, 0,
	517, 518, 529, 0, 0, 0, 379, 607, 0, -2,
	0, 497, 655, 632, 0, 0, 0, 0, 502, 609,
	0, 502, 609, 0, 0, 0, 376, 377, 604, 601,
	0, 0, 606, 0, 568, 0, 0, 0, 0, 0,
	0, 0, 0, 636, 44, 34, 0, 637, 0, 0,
	0, 0, 628, 630, 631, 636, 0, 617, 0, 0,
	455, 0, 383, 40, 392, 399, 395, 0, 455, 0,
	0, 445, 0, 0, 0, 0, 0, 0, 435, 0,
	0, 438, 0, 0, 0, 0, 429, 0, 0, 0,
	450, 928, 431, 0, 433, 434, -2, 0, 0, 0,
	54, 55, 0, 0, 0, 661, 63, 0, 0, 68,
	69, 662, 663, 664, 665, 0, 92, 223, 225, 228,
	229, 230, 96, 97, 98, 0, 0, 210, 938, 971,
	204, 204, 872, 202, 203, 94, 164, 162, 0, 159,
	158, 104, 0, 170, 170, 127, 128, 173, 0, 173,
	173, 173, 0, 0, 121, 122, 123, 115, 0, 116,
	117, 118, 0, 119, 0, 0, 1015, 81, 678, 82,
	1014, 0, 0, 694, 237, 681, 682, 683, 684, 685,
	686, 687, 688, 689, 690, 0, 83, 241, 243, 242,
	246, 0, 0, 0, 268, 1015, 272, 318, 318, 297,
	319, 320, 304, 335, 480, 482, 484, 471, 492, 475,
	0, 472, 0, 0, 466, 534, 0, 0, 378, 0,
	624, 636, 538, 539, 0, 0, 0, 0, 0, 575,
	0, 0, 576, 0, 624, 0, 602, 0, 0, 550,
	0, 569, 0, 0, 570, 571, 572, 573, 574, 36,
	0, 0, 634, 635, 627, 35, 0, 673, 674, 618,
	619, 620, 0, 403, 384, 0, 632, 649, 0, 0,
	642, 0, 0, 455, 657, 0, 405, 424, 426, 0,
	421, 436, 437, 439, 0, 441, 0, 443, 444, 409,
	410, 411, 0, 412, 0, 0, 0, 0, 432, 455,
	0, 455, 57, 455, 59, 0, 449, 66, 67, 0,
	0, 73, 174, 175, 0, 226, 0, 0, 0, 192,
	204, 204, 195, 205, 196, 0, 166, 0, 163, 100,
	160, 0, 173, 173, 129, 0, 130, 131, 132, 0,
	148, 0, 0, 0, 0, 703, 80, 231, 1014, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 1014, 0, 1014, 695, 696, 697, 698,
	0, 86, 0, 0, 0, 0, 0, 271, 321, 321,
	473, 0, 493, 476, 535, 536, 0, 608, 632, 38,
	0, 150, 150, 587, 150, 154, 590, 150, 592, 150,
	595, 0, 0, 0, 0, 0, 0, 0, 599, 549,
	605, 0, 607, 0, 0, 0, 638, 37, 622, 0,
	456, 396, 41, 45, 0, 649, 641, 651, 653, 0,
	0, 645, 0, 416, 624, 0, 0, 418, 425, 0,
	0, 419, 0, 420, 440, 442, -2, 0, 0, 0,
	0, 624, 455, 52, 53, 0, 70, 71, 72, 224,
	227, 0, 206, 150, 209, 0, 193, 194, 0, 168,
	0, 165, 151, 125, 126, 171, 172, 170, 0, 170,
	0, 155, 0, 1015, 232, 233, 234, 235, 0, 240,
	0, 84, 85, 0, 0, 245, 269, 291, 296, 477,
	537, 636, 540, 584, 170, 588, 589, 591, 593, 594,
	596, 542, 541, 0, 0, 0, 0, 0, 632, 0,
	603, 0, 0, 640, 42, 0, 0, 0, 46, 0,
	654, 0, 0, 0, 61, 0, 632, 658, 659, 422,
	0, 427, 0, 0, 0, 430, 632, 51, 184, 0,
	208, 0, 414, 176, 169, 0, 173, 149, 173, 0,
	0, 78, 0, 87, 88, 0, 0, 0, 39, 585,
	586, 0, 0, 0, 0, 577, 0, 600, 0, 0,
	623, 621, 0, 652, 0, 644, 647, 646, 417, 49,
	0, 0, 452, 0, 0, 450, 50, 183, 185, 0,
	190, 0, 207, 0, 0, 181, 0, 178, 180, 167,
	138, 139, 153, 156, 0, 0, 0, 0, 247, 543,
	545, 544, 546, 0, 0, 0, 548, 565, 566, 0,
	643, 0, 423, 451, 453, 454, 413, 186, 187, 0,
	191, 189, 0, 415, 99, 0, 177, 179, 0, 263,
	0, 89, 90, 83, 547, 0, 0, 0, 650, 648,
	188, 0, 182, 262, 0, 0, 86, 578, 0, 581,
	0, 264, 0, 244, 579, 0, 0, 0, 211, 0,
	0, 212, 213, 0, 0, 580, 214, 0, 0, 0,
	0, 0, 215, 217, 218, 0, 0, 216, 265, 266,
	219, 220, 221,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 84, 3, 3, 3, 111, 103, 3,
	60, 62, 108, 106, 61, 107, 123, 109, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 371,
	92, 91, 93, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 113, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 102, 3, 114,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 85,
	86, 87, 88, 89, 90, 94, 95, 96, 97, 98,
	99, 100, 101, 104, 105, 110, 112, 115, 116, 117,
	118, 119, 120, 121, 122, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:361
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:366
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:367
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:371
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 29:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:399
		{
			setParseTree(yylex, nil)
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:405
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), NoAt)
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:409
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:413
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 33:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:419
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 34:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:425
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].lock
			sel.IntoOutfileS3 = yyDollar[5].str
			yyVAL.selStmt = sel
		}
	case 35:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:434
		{
			yyVAL.selStmt = &Union{FirstStatement: &ParenSelect{Select: yyDollar[2].selStmt}, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].lock}
		}
	case 36:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:438
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].unionType, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].lock)
		}
	case 37:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:442
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), SelectExprs{Nextval{Expr: yyDollar[5].expr}}, []string{yyDollar[3].str} /*options*/, TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:465
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].lock
			yyVAL.selStmt = sel
		}
	case 39:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:473
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].unionType, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].lock)
		}
	case 40:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:479
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExprs, Table: yyDollar[5].tableName}
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:485
		{
			yyVAL.statement = &VStream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName, Where: NewWhere(WhereClause, yyDollar[6].expr), Limit: yyDollar[7].limit}
		}
	case 42:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:493
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), yyDollar[4].selectExprs /*SelectExprs*/, yyDollar[3].strs /*options*/, yyDollar[5].tableExprs /*from*/, NewWhere(WhereClause, yyDollar[6].expr), GroupBy(yyDollar[7].exprs), NewWhere(HavingClause, yyDollar[8].expr))
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:499
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:503
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 45:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:510
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].insertAction
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].ignore
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 46:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:522
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].insertAction, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:534
		{
			yyVAL.insertAction = InsertAct
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:538
		{
			yyVAL.insertAction = ReplaceAct
		}
	case 49:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:544
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereClause, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 50:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:550
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[5].tableName}}, Partitions: yyDollar[6].partitions, Where: NewWhere(WhereClause, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 51:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:554
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Targets: yyDollar[5].tableNames, TableExprs: yyDollar[7].tableExprs, Where: NewWhere(WhereClause, yyDollar[8].expr)}
		}
	case 52:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:558
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereClause, yyDollar[7].expr)}
		}
	case 53:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:562
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereClause, yyDollar[7].expr)}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:567
		{
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:568
		{
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:572
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:576
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:582
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:586
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 60:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:591
		{
			yyVAL.partitions = nil
		}
	case 61:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:595
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:601
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 63:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:607
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].scope, Characteristics: yyDollar[5].characteristics}
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:611
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Characteristics: yyDollar[4].characteristics, Scope: ImplicitScope}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:617
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:621
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[3].characteristic)
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:627
		{
			yyVAL.characteristic = yyDollar[3].isolationLevel
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:631
		{
			yyVAL.characteristic = ReadWrite
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:635
		{
			yyVAL.characteristic = ReadOnly
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:641
		{
			yyVAL.isolationLevel = RepeatableRead
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:645
		{
			yyVAL.isolationLevel = ReadCommitted
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:649
		{
			yyVAL.isolationLevel = ReadUncommitted
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:653
		{
			yyVAL.isolationLevel = Serializable
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:659
		{
			yyVAL.scope = SessionScope
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:663
		{
			yyVAL.scope = GlobalScope
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:669
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:674
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 78:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:680
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[7].tableName}
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:685
		{
			yyVAL.statement = &DDL{Action: CreateDDLAction, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 80:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:689
		{
			yyVAL.statement = &DDL{Action: CreateDDLAction, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 81:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:693
		{
			yyVAL.statement = &DBDDL{Action: CreateDBDDLAction, DBName: string(yyDollar[4].colIdent.String()), IfNotExists: yyDollar[3].boolean}
		}
	case 82:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:697
		{
			yyVAL.statement = &DBDDL{Action: CreateDBDDLAction, DBName: string(yyDollar[4].colIdent.String()), IfNotExists: yyDollar[3].boolean}
		}
	case 83:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:702
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:706
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:712
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 86:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:717
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:722
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:728
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:733
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:739
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:745
		{
			yyVAL.ddl = &DDL{Action: CreateDDLAction, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:752
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:759
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:763
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:769
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:774
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:778
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:782
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 99:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:788
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolean
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolean
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].literal
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:799
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolean
			yyVAL.columnType.Zerofill = yyDollar[3].boolean
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:810
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].literal
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:815
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:821
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:825
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:829
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:833
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:837
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:841
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:845
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:849
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:853
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:859
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:865
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:871
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:877
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:883
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:891
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:895
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:899
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:903
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:907
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:913
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 126:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:917
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:921
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:925
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:929
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:933
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:937
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:941
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:945
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:949
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:953
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:957
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:961
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:965
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 139:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:970
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:976
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:980
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:984
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:988
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:992
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:996
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1000
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1004
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1010
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1015
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 150:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1020
		{
			yyVAL.literal = nil
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1024
		{
			yyVAL.literal = NewIntLiteral(yyDollar[2].bytes)
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1029
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 153:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1033
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
				Scale:  NewIntLiteral(yyDollar[4].bytes),
			}
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1041
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1045
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
			}
		}
	case 156:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1051
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
				Scale:  NewIntLiteral(yyDollar[4].bytes),
			}
		}
	case 157:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1059
		{
			yyVAL.boolean = false
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1063
		{
			yyVAL.boolean = true
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1068
		{
			yyVAL.boolean = false
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1072
		{
			yyVAL.boolean = true
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1078
		{
			yyVAL.boolean = false
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1082
		{
			yyVAL.boolean = false
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1086
		{
			yyVAL.boolean = true
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1091
		{
			yyVAL.optVal = nil
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1095
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1100
		{
			yyVAL.optVal = nil
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1104
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1109
		{
			yyVAL.boolean = false
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1113
		{
			yyVAL.boolean = true
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1118
		{
			yyVAL.str = ""
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1122
		{
			yyVAL.str = string(yyDollar[3].colIdent.String())
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1126
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1131
		{
			yyVAL.str = ""
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1135
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1139
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 176:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1144
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1148
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1152
		{
			yyVAL.colKeyOpt = colKey
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1156
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1160
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1165
		{
			yyVAL.literal = nil
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1169
		{
			yyVAL.literal = NewStrLiteral(yyDollar[2].bytes)
		}
	case 183:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1175
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 184:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1179
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1185
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1189
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1195
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].colIdent.String())}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1199
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntLiteral(yyDollar[3].bytes)}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1204
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrLiteral(yyDollar[2].bytes)}
		}
	case 190:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1210
		{
			yyVAL.str = ""
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1214
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 192:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1220
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 193:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1224
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1228
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1232
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 196:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1236
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1242
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1246
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1250
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1257
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1261
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1267
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1271
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 204:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1276
		{
			yyVAL.str = ""
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1280
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1286
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1290
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1296
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].literal}
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1302
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1306
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 211:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1313
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 212:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1317
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 213:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1321
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 214:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1325
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 215:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1331
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1337
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1343
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1347
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1351
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 220:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1355
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 221:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1359
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 222:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1364
		{
			yyVAL.str = ""
		}
	case 223:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1368
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 224:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1372
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 225:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1380
		{
			yyVAL.str = yyDollar[1].str
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1384
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1388
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 228:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1394
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1398
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 230:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1402
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 231:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1408
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, OnlineHint: yyDollar[2].OnlineDDLHint, Table: yyDollar[4].tableName}
		}
	case 232:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1412
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, OnlineHint: yyDollar[2].OnlineDDLHint, Table: yyDollar[4].tableName}
		}
	case 233:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1416
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, OnlineHint: yyDollar[2].OnlineDDLHint, Table: yyDollar[4].tableName}
		}
	case 234:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1420
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameDDLAction, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 235:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1425
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterDDLAction, OnlineHint: yyDollar[2].OnlineDDLHint, Table: yyDollar[4].tableName}
		}
	case 236:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1430
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 237:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1434
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, OnlineHint: yyDollar[2].OnlineDDLHint, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 238:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1438
		{
			yyVAL.statement = &DBDDL{Action: AlterDBDDLAction, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 239:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1442
		{
			yyVAL.statement = &DBDDL{Action: AlterDBDDLAction, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 240:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1446
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexDDLAction,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 241:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1458
		{
			yyVAL.statement = &DDL{
				Action: DropVindexDDLAction,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 242:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1468
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableDDLAction, Table: yyDollar[5].tableName}
		}
	case 243:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1472
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableDDLAction, Table: yyDollar[5].tableName}
		}
	case 244:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1476
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexDDLAction,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 245:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1489
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexDDLAction,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 246:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1499
		{
			yyVAL.statement = &DDL{Action: AddSequenceDDLAction, Table: yyDollar[5].tableName}
		}
	case 247:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1503
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncDDLAction,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 262:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1532
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeAction, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 263:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1538
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1542
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 265:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1548
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 266:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1552
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1558
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1564
		{
			yyVAL.ddl = &DDL{Action: RenameDDLAction, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 269:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1568
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 270:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1576
		{
			yyVAL.statement = &DDL{Action: DropDDLAction, FromTables: yyDollar[4].tableNames, IfExists: yyDollar[3].boolean}
		}
	case 271:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1580
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[5].tableName}
		}
	case 272:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1585
		{
			yyVAL.statement = &DDL{Action: DropDDLAction, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: yyDollar[3].boolean}
		}
	case 273:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1589
		{
			yyVAL.statement = &DBDDL{Action: DropDBDDLAction, DBName: string(yyDollar[4].colIdent.String()), IfExists: yyDollar[3].boolean}
		}
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1593
		{
			yyVAL.statement = &DBDDL{Action: DropDBDDLAction, DBName: string(yyDollar[4].colIdent.String()), IfExists: yyDollar[3].boolean}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1599
		{
			yyVAL.statement = &DDL{Action: TruncateDDLAction, Table: yyDollar[3].tableName}
		}
	case 276:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1603
		{
			yyVAL.statement = &DDL{Action: TruncateDDLAction, Table: yyDollar[2].tableName}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1608
		{
			yyVAL.statement = &OtherRead{}
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1614
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String()), Scope: ImplicitScope}
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1619
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Type: CharsetStr, ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}
		}
	case 280:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1624
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}
		}
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1629
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}
		}
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1634
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String()), Scope: ImplicitScope}
		}
	case 283:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1638
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}
		}
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1642
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName, Scope: ImplicitScope}
		}
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1646
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}
		}
	case 286:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1650
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1654
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1659
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1664
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1669
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}
		}
	case 291:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1673
		{
			showTablesOpt := &ShowTablesOpt{DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName, Scope: ImplicitScope}
		}
	case 292:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1678
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1682
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}
		}
	case 294:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1686
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].scope, Type: string(yyDollar[3].bytes)}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1690
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}
		}
	case 296:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1694
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName, Scope: ImplicitScope}
		}
	case 297:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1699
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str, Scope: ImplicitScope}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}
			}
		}
	case 298:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1709
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].scope, Type: string(yyDollar[3].bytes)}
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1713
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}
		}
	case 300:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1717
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: yyDollar[4].expr, Scope: ImplicitScope}
		}
	case 301:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1721
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: VitessMetadataScope, Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 302:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1726
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}
		}
	case 303:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1730
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}
		}
	case 304:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1734
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName, Scope: ImplicitScope}
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1738
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}
		}
	case 306:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1743
		{
			// This should probably be a different type (ShowVitessTopoOpt), but
			// just getting the thing working for now
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: yyDollar[2].str, ShowTablesOpt: showTablesOpt}
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1757
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].colIdent.String()), Scope: ImplicitScope}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1763
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1767
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1773
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1777
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 312:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1783
		{
			yyVAL.str = ""
		}
	case 313:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1787
		{
			yyVAL.str = "extended "
		}
	case 314:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1793
		{
			yyVAL.str = ""
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1797
		{
			yyVAL.str = "full "
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1803
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1807
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1813
		{
			yyVAL.str = ""
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1817
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1821
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1827
		{
			yyVAL.showFilter = nil
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1831
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1835
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1841
		{
			yyVAL.showFilter = nil
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1845
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1851
		{
			yyVAL.scope = ImplicitScope
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1855
		{
			yyVAL.scope = SessionScope
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1859
		{
			yyVAL.scope = GlobalScope
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1865
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1869
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1875
		{
			yyVAL.statement = &Begin{}
		}
	case 332:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1879
		{
			yyVAL.statement = &Begin{}
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1885
		{
			yyVAL.statement = &Commit{}
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1891
		{
			yyVAL.statement = &Rollback{}
		}
	case 335:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1895
		{
			yyVAL.statement = &SRollback{Name: yyDollar[5].colIdent}
		}
	case 336:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1900
		{
			yyVAL.empty = struct{}{}
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1902
		{
			yyVAL.empty = struct{}{}
		}
	case 338:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1905
		{
			yyVAL.empty = struct{}{}
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1907
		{
			yyVAL.empty = struct{}{}
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1912
		{
			yyVAL.statement = &Savepoint{Name: yyDollar[2].colIdent}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1918
		{
			yyVAL.statement = &Release{Name: yyDollar[3].colIdent}
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1923
		{
			yyVAL.explainType = EmptyType
		}
	case 343:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1927
		{
			yyVAL.explainType = JSONType
		}
	case 344:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1931
		{
			yyVAL.explainType = TreeType
		}
	case 345:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1935
		{
			yyVAL.explainType = VitessType
		}
	case 346:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1939
		{
			yyVAL.explainType = TraditionalType
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1943
		{
			yyVAL.explainType = AnalyzeType
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1949
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1953
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1957
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 351:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1963
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1967
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1971
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1975
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 355:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1980
		{
			yyVAL.str = ""
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1984
		{
			yyVAL.str = ""
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1988
		{
			yyVAL.str = ""
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1994
		{
			yyVAL.statement = &OtherRead{}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1998
		{
			yyVAL.statement = &Explain{Type: yyDollar[2].explainType, Statement: yyDollar[3].statement}
		}
	case 360:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2004
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 361:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2008
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2012
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2016
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 364:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2022
		{
			yyVAL.statement = &DDL{Action: FlushDDLAction}
		}
	case 365:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2026
		{
			setAllowComments(yylex, true)
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2030
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 367:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2036
		{
			yyVAL.bytes2 = nil
		}
	case 368:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2040
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2046
		{
			yyVAL.unionType = UnionBasic
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2050
		{
			yyVAL.unionType = UnionAll
		}
	case 371:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2054
		{
			yyVAL.unionType = UnionDistinct
		}
	case 372:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2059
		{
			yyVAL.str = ""
		}
	case 373:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2063
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 374:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2067
		{
			yyVAL.str = SQLCacheStr
		}
	case 375:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2072
		{
			yyVAL.boolean = false
		}
	case 376:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2076
		{
			yyVAL.boolean = true
		}
	case 377:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2080
		{
			yyVAL.boolean = true
		}
	case 378:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2085
		{
			yyVAL.selectExprs = nil
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2089
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 380:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2094
		{
			yyVAL.strs = nil
		}
	case 381:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2098
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2102
		{ // TODO: This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str}
		}
	case 383:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2106
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str}
		}
	case 384:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2110
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str, yyDollar[4].str}
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2116
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2120
		{
			yyVAL.str = SQLCacheStr
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2124
		{
			yyVAL.str = DistinctStr
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2128
		{
			yyVAL.str = DistinctStr
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2132
		{
			yyVAL.str = StraightJoinHint
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2136
		{
			yyVAL.str = SQLCalcFoundRowsStr
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2142
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 392:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2146
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2152
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2156
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2160
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 396:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2164
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 397:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2169
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 398:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2173
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2177
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 401:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2184
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 402:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2189
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2193
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2199
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2203
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 408:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2213
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 409:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2217
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2221
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2227
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 412:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2233
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 413:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2237
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2243
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2247
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 416:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2253
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2257
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 418:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2270
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 419:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2274
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 420:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2278
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2282
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr}
		}
	case 422:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2288
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 423:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2290
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 424:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2294
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 425:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2296
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 426:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2300
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 427:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2302
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 428:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2305
		{
			yyVAL.empty = struct{}{}
		}
	case 429:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2307
		{
			yyVAL.empty = struct{}{}
		}
	case 430:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2310
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2314
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 432:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2318
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2325
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2331
		{
			yyVAL.joinType = NormalJoinType
		}
	case 436:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2335
		{
			yyVAL.joinType = NormalJoinType
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2339
		{
			yyVAL.joinType = NormalJoinType
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2345
		{
			yyVAL.joinType = StraightJoinType
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2351
		{
			yyVAL.joinType = LeftJoinType
		}
	case 440:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2355
		{
			yyVAL.joinType = LeftJoinType
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2359
		{
			yyVAL.joinType = RightJoinType
		}
	case 442:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2363
		{
			yyVAL.joinType = RightJoinType
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2369
		{
			yyVAL.joinType = NaturalJoinType
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2373
		{
			if yyDollar[2].joinType == LeftJoinType {
				yyVAL.joinType = NaturalLeftJoinType
			} else {
				yyVAL.joinType = NaturalRightJoinType
			}
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2383
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2387
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2393
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2397
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 449:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2403
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 450:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2408
		{
			yyVAL.indexHints = nil
		}
	case 451:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2412
		{
			yyVAL.indexHints = &IndexHints{Type: UseOp, Indexes: yyDollar[4].columns}
		}
	case 452:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2416
		{
			yyVAL.indexHints = &IndexHints{Type: UseOp}
		}
	case 453:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2420
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreOp, Indexes: yyDollar[4].columns}
		}
	case 454:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2424
		{
			yyVAL.indexHints = &IndexHints{Type: ForceOp, Indexes: yyDollar[4].columns}
		}
	case 455:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2429
		{
			yyVAL.expr = nil
		}
	case 456:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2433
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2439
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2443
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2447
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2451
		{
			yyVAL.expr = &XorExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 461:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2455
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2459
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].isExprOperator, Expr: yyDollar[1].expr}
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2463
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 464:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2467
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 465:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2473
		{
			yyVAL.str = ""
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2477
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 467:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2483
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 468:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2487
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2493
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].comparisonExprOperator, Right: yyDollar[3].expr}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2497
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InOp, Right: yyDollar[3].colTuple}
		}
	case 471:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2501
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInOp, Right: yyDollar[4].colTuple}
		}
	case 472:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2505
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeOp, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 473:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2509
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeOp, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2513
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpOp, Right: yyDollar[3].expr}
		}
	case 475:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2517
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpOp, Right: yyDollar[4].expr}
		}
	case 476:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2521
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenOp, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 477:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2525
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenOp, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2529
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 479:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2535
		{
			yyVAL.isExprOperator = IsNullOp
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2539
		{
			yyVAL.isExprOperator = IsNotNullOp
		}
	case 481:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2543
		{
			yyVAL.isExprOperator = IsTrueOp
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2547
		{
			yyVAL.isExprOperator = IsNotTrueOp
		}
	case 483:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2551
		{
			yyVAL.isExprOperator = IsFalseOp
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2555
		{
			yyVAL.isExprOperator = IsNotFalseOp
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2561
		{
			yyVAL.comparisonExprOperator = EqualOp
		}
	case 486:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2565
		{
			yyVAL.comparisonExprOperator = LessThanOp
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2569
		{
			yyVAL.comparisonExprOperator = GreaterThanOp
		}
	case 488:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2573
		{
			yyVAL.comparisonExprOperator = LessEqualOp
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2577
		{
			yyVAL.comparisonExprOperator = GreaterEqualOp
		}
	case 490:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2581
		{
			yyVAL.comparisonExprOperator = NotEqualOp
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2585
		{
			yyVAL.comparisonExprOperator = NullSafeEqualOp
		}
	case 492:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2590
		{
			yyVAL.expr = nil
		}
	case 493:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2594
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2600
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2604
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2608
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 497:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2614
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 498:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2620
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 499:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2624
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2630
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2634
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2638
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 503:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2642
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2646
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2650
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndOp, Right: yyDollar[3].expr}
		}
	case 506:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2654
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrOp, Right: yyDollar[3].expr}
		}
	case 507:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2658
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorOp, Right: yyDollar[3].expr}
		}
	case 508:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2662
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusOp, Right: yyDollar[3].expr}
		}
	case 509:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2666
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusOp, Right: yyDollar[3].expr}
		}
	case 510:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2670
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultOp, Right: yyDollar[3].expr}
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2674
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivOp, Right: yyDollar[3].expr}
		}
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2678
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivOp, Right: yyDollar[3].expr}
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2682
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModOp, Right: yyDollar[3].expr}
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2686
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModOp, Right: yyDollar[3].expr}
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2690
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftOp, Right: yyDollar[3].expr}
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2694
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightOp, Right: yyDollar[3].expr}
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2698
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2702
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2706
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2710
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryOp, Expr: yyDollar[2].expr}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2714
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryOp, Expr: yyDollar[2].expr}
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2718
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8Op, Expr: yyDollar[2].expr}
		}
	case 523:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2722
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Op, Expr: yyDollar[2].expr}
		}
	case 524:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2726
		{
			yyVAL.expr = &UnaryExpr{Operator: Latin1Op, Expr: yyDollar[2].expr}
		}
	case 525:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2730
		{
			if num, ok := yyDollar[2].expr.(*Literal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusOp, Expr: yyDollar[2].expr}
			}
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2738
		{
			if num, ok := yyDollar[2].expr.(*Literal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntLiteral(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusOp, Expr: yyDollar[2].expr}
			}
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2752
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaOp, Expr: yyDollar[2].expr}
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2756
		{
			yyVAL.expr = &UnaryExpr{Operator: BangOp, Expr: yyDollar[2].expr}
		}
	case 529:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2760
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 534:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2778
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 535:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2782
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 536:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2786
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 537:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2790
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 538:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2800
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 539:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2804
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 540:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2808
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 541:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2812
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 542:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2816
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 543:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2820
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 544:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2824
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 545:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2828
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrLiteral(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 546:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2832
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrLiteral(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 547:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2836
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].matchExprOption}
		}
	case 548:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2840
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].boolean, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str, Limit: yyDollar[7].limit}
		}
	case 549:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2844
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 550:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2848
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2858
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2862
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 553:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2866
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2871
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2876
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2881
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2887
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2892
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2897
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2901
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2905
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2910
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2915
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2920
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 565:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2924
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 566:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2928
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 569:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2938
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 570:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2948
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 571:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2952
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 572:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2956
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema"), Exprs: yyDollar[3].selectExprs}
		}
	case 573:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2960
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 574:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2964
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 575:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2968
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 576:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2972
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 577:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2978
		{
			yyVAL.matchExprOption = NoOption
		}
	case 578:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2982
		{
			yyVAL.matchExprOption = BooleanModeOpt
		}
	case 579:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2986
		{
			yyVAL.matchExprOption = NaturalLanguageModeOpt
		}
	case 580:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2990
		{
			yyVAL.matchExprOption = NaturalLanguageModeWithQueryExpansionOpt
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2994
		{
			yyVAL.matchExprOption = QueryExpansionOpt
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3000
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 583:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3004
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3010
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 585:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3014
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Operator: CharacterSetOp}
		}
	case 586:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3018
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: string(yyDollar[3].colIdent.String())}
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3022
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3026
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3030
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 590:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3036
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3040
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 592:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3044
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3048
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3052
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3056
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3060
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 597:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3065
		{
			yyVAL.expr = nil
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3069
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 599:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3074
		{
			yyVAL.str = string("")
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3078
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3084
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3088
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 603:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3094
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 604:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3099
		{
			yyVAL.expr = nil
		}
	case 605:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3103
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3109
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3113
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 608:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3117
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 609:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3123
		{
			yyVAL.expr = NewStrLiteral(yyDollar[1].bytes)
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3127
		{
			yyVAL.expr = NewHexLiteral(yyDollar[1].bytes)
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3131
		{
			yyVAL.expr = NewBitLiteral(yyDollar[1].bytes)
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3135
		{
			yyVAL.expr = NewIntLiteral(yyDollar[1].bytes)
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3139
		{
			yyVAL.expr = NewFloatLiteral(yyDollar[1].bytes)
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3143
		{
			yyVAL.expr = NewHexNumLiteral(yyDollar[1].bytes)
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3147
		{
			yyVAL.expr = NewArgument(yyDollar[1].bytes)
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3151
		{
			yyVAL.expr = &NullVal{}
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3157
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntLiteral([]byte("1"))
		}
	case 618:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3166
		{
			yyVAL.expr = NewIntLiteral(yyDollar[1].bytes)
		}
	case 619:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3170
		{
			yyVAL.expr = NewArgument(yyDollar[1].bytes)
		}
	case 620:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3175
		{
			yyVAL.exprs = nil
		}
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3179
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 622:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3184
		{
			yyVAL.expr = nil
		}
	case 623:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3188
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 624:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3193
		{
			yyVAL.orderBy = nil
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3197
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3203
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3207
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 628:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3213
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].orderDirection}
		}
	case 629:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3218
		{
			yyVAL.orderDirection = AscOrder
		}
	case 630:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3222
		{
			yyVAL.orderDirection = AscOrder
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3226
		{
			yyVAL.orderDirection = DescOrder
		}
	case 632:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3231
		{
			yyVAL.limit = nil
		}
	case 633:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3235
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 634:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3239
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 635:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3243
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 636:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3248
		{
			yyVAL.lock = NoLock
		}
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3252
		{
			yyVAL.lock = ForUpdateLock
		}
	case 638:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3256
		{
			yyVAL.lock = ShareModeLock
		}
	case 639:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3261
		{
			yyVAL.str = ""
		}
	case 640:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3265
		{
			yyVAL.str = string(yyDollar[4].bytes)
		}
	case 641:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3278
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3282
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 643:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3286
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 644:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3290
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3296
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 646:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3300
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 647:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3304
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 648:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3308
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 649:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3313
		{
			yyVAL.updateExprs = nil
		}
	case 650:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3317
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3323
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 652:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3327
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3333
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 654:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3337
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 655:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3343
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3349
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = yyDollar[1].valTuple[0]
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3359
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 658:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3363
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 659:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3369
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3375
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3379
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 662:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3385
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Scope: ImplicitScope, Expr: NewStrLiteral([]byte("on"))}
		}
	case 663:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3389
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Scope: ImplicitScope, Expr: NewStrLiteral([]byte("off"))}
		}
	case 664:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3393
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Scope: ImplicitScope, Expr: yyDollar[3].expr}
		}
	case 665:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3397
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Scope: ImplicitScope, Expr: yyDollar[2].expr}
		}
	case 666:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3401
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].scope
			yyVAL.setExpr = yyDollar[2].setExpr
		}
	case 668:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3409
		{
			yyVAL.bytes = []byte("charset")
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3416
		{
			yyVAL.expr = NewStrLiteral([]byte(yyDollar[1].colIdent.String()))
		}
	case 671:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3420
		{
			yyVAL.expr = NewStrLiteral(yyDollar[1].bytes)
		}
	case 672:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3424
		{
			yyVAL.expr = &Default{}
		}
	case 675:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3433
		{
			yyVAL.boolean = false
		}
	case 676:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3435
		{
			yyVAL.boolean = true
		}
	case 677:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3438
		{
			yyVAL.boolean = false
		}
	case 678:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3440
		{
			yyVAL.boolean = true
		}
	case 679:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3443
		{
			yyVAL.ignore = false
		}
	case 680:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3445
		{
			yyVAL.ignore = true
		}
	case 681:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3449
		{
			yyVAL.empty = struct{}{}
		}
	case 682:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3451
		{
			yyVAL.empty = struct{}{}
		}
	case 683:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3453
		{
			yyVAL.empty = struct{}{}
		}
	case 684:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3455
		{
			yyVAL.empty = struct{}{}
		}
	case 685:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3457
		{
			yyVAL.empty = struct{}{}
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3459
		{
			yyVAL.empty = struct{}{}
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3461
		{
			yyVAL.empty = struct{}{}
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3463
		{
			yyVAL.empty = struct{}{}
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3465
		{
			yyVAL.empty = struct{}{}
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3467
		{
			yyVAL.empty = struct{}{}
		}
	case 691:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3471
		{
			yyVAL.OnlineDDLHint = &OnlineDDLHint{}
		}
	case 692:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3475
		{
			yyVAL.OnlineDDLHint = &OnlineDDLHint{
				Strategy: DDLStrategy(yyDollar[2].bytes),
			}
		}
	case 693:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3481
		{
			yyVAL.OnlineDDLHint = &OnlineDDLHint{
				Strategy: DDLStrategy(yyDollar[2].bytes),
				Options:  string(yyDollar[3].bytes),
			}
		}
	case 694:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3489
		{
			yyVAL.empty = struct{}{}
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3491
		{
			yyVAL.empty = struct{}{}
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3493
		{
			yyVAL.empty = struct{}{}
		}
	case 697:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3497
		{
			yyVAL.empty = struct{}{}
		}
	case 698:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3499
		{
			yyVAL.empty = struct{}{}
		}
	case 699:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3502
		{
			yyVAL.empty = struct{}{}
		}
	case 700:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3504
		{
			yyVAL.empty = struct{}{}
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3506
		{
			yyVAL.empty = struct{}{}
		}
	case 702:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3509
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 703:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3511
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3515
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 705:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3519
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3526
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 708:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3532
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].colIdent.String()))
		}
	case 709:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3536
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3543
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 1012:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3869
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1013:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3878
		{
			decNesting(yylex)
		}
	case 1014:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3883
		{
			skipToEnd(yylex)
		}
	case 1015:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3888
		{
			skipToEnd(yylex)
		}
	case 1016:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3892
		{
			skipToEnd(yylex)
		}
	case 1017:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3896
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
